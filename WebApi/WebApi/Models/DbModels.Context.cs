//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBContextEntities : DbContext
    {
        public DBContextEntities()
            : base("name=DBContextEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompanyStructureContent> CompanyStructureContents { get; set; }
        public virtual DbSet<tblAccountTransaction> tblAccountTransactions { get; set; }
        public virtual DbSet<tblAutoGenNumber> tblAutoGenNumbers { get; set; }
        public virtual DbSet<tblAutoGenPrefix> tblAutoGenPrefixes { get; set; }
        public virtual DbSet<tblAutoGenSetup> tblAutoGenSetups { get; set; }
        public virtual DbSet<tblBankBranch> tblBankBranches { get; set; }
        public virtual DbSet<tblBank> tblBanks { get; set; }
        public virtual DbSet<tblBeneficiary> tblBeneficiaries { get; set; }
        public virtual DbSet<tblCharge> tblCharges { get; set; }
        public virtual DbSet<tblClientType> tblClientTypes { get; set; }
        public virtual DbSet<tblCollateral> tblCollaterals { get; set; }
        public virtual DbSet<tblCompanyBranch> tblCompanyBranches { get; set; }
        public virtual DbSet<tblContact> tblContacts { get; set; }
        public virtual DbSet<tblCreditOfficer> tblCreditOfficers { get; set; }
        public virtual DbSet<tblCurrency> tblCurrencies { get; set; }
        public virtual DbSet<tblDocumentType> tblDocumentTypes { get; set; }
        public virtual DbSet<tblExchangeRate> tblExchangeRates { get; set; }
        public virtual DbSet<tblFile> tblFiles { get; set; }
        public virtual DbSet<tblGender> tblGenders { get; set; }
        public virtual DbSet<tblIndexContact> tblIndexContacts { get; set; }
        public virtual DbSet<tblKin> tblKins { get; set; }
        public virtual DbSet<tblLevelofEducation> tblLevelofEducations { get; set; }
        public virtual DbSet<tblLoanChargesList> tblLoanChargesLists { get; set; }
        public virtual DbSet<tblLoanChargesListTariff> tblLoanChargesListTariffs { get; set; }
        public virtual DbSet<tblLoanCollateral> tblLoanCollaterals { get; set; }
        public virtual DbSet<tblLoanDonor> tblLoanDonors { get; set; }
        public virtual DbSet<tblLoanGuarator> tblLoanGuarators { get; set; }
        public virtual DbSet<tblLoanPurpose> tblLoanPurposes { get; set; }
        public virtual DbSet<tblLoanStatu> tblLoanStatus { get; set; }
        public virtual DbSet<tblLoansType> tblLoansTypes { get; set; }
        public virtual DbSet<tblLoanTypeCharge> tblLoanTypeCharges { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<tblMaritalStatu> tblMaritalStatus { get; set; }
        public virtual DbSet<tblMemberDocument> tblMemberDocuments { get; set; }
        public virtual DbSet<tblMember> tblMembers { get; set; }
        public virtual DbSet<tblMemberShare> tblMemberShares { get; set; }
        public virtual DbSet<tblMemberStatu> tblMemberStatus { get; set; }
        public virtual DbSet<tblNationality> tblNationalitys { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblProductCharge> tblProductCharges { get; set; }
        public virtual DbSet<tblRelation> tblRelations { get; set; }
        public virtual DbSet<tblSecurityQuestion> tblSecurityQuestions { get; set; }
        public virtual DbSet<tblStructure> tblStructures { get; set; }
        public virtual DbSet<tblStructureGroupDetail> tblStructureGroupDetails { get; set; }
        public virtual DbSet<tblStructureValue> tblStructureValues { get; set; }
        public virtual DbSet<tblTariff> tblTariffs { get; set; }
        public virtual DbSet<tblTestCustomer> tblTestCustomers { get; set; }
        public virtual DbSet<tblTestKin> tblTestKins { get; set; }
        public virtual DbSet<tblTitle> tblTitles { get; set; }
        public virtual DbSet<tblTransactionCharge> tblTransactionCharges { get; set; }
        public virtual DbSet<tblWebContactsU> tblWebContactsUs { get; set; }
        public virtual DbSet<LoanApplicationCharge> LoanApplicationCharges { get; set; }
        public virtual DbSet<tblLogin> tblLogins { get; set; }
        public virtual DbSet<tblLoanTransaction> tblLoanTransactions { get; set; }
        public virtual DbSet<tblSerial> tblSerials { get; set; }
        public virtual DbSet<tblLoan> tblLoans { get; set; }
        public virtual DbSet<tblLoanRepayment> tblLoanRepayments { get; set; }
        public virtual DbSet<tblLoanRecoveryOrder> tblLoanRecoveryOrders { get; set; }
    
        public virtual ObjectResult<AddEditTransactions_Result> AddEditTransactions(Nullable<int> accountTransactionId, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, string memberNo, string documentNo, Nullable<int> productId, string modeOfPayment, string transType, Nullable<int> baseCurrencyId, Nullable<int> currencyId, string currencySymbol, Nullable<decimal> exchangeRate, Nullable<bool> commission, string paidBy, Nullable<decimal> localCurrencyAmount, Nullable<decimal> amount, Nullable<decimal> amountCharge, Nullable<decimal> balanceAmount, string remarks, string inputXML)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var currencySymbolParameter = currencySymbol != null ?
                new ObjectParameter("CurrencySymbol", currencySymbol) :
                new ObjectParameter("CurrencySymbol", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(bool));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var localCurrencyAmountParameter = localCurrencyAmount.HasValue ?
                new ObjectParameter("LocalCurrencyAmount", localCurrencyAmount) :
                new ObjectParameter("LocalCurrencyAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var amountChargeParameter = amountCharge.HasValue ?
                new ObjectParameter("AmountCharge", amountCharge) :
                new ObjectParameter("AmountCharge", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var inputXMLParameter = inputXML != null ?
                new ObjectParameter("InputXML", inputXML) :
                new ObjectParameter("InputXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddEditTransactions_Result>("AddEditTransactions", accountTransactionIdParameter, transactionDateParameter, valueDateParameter, memberNoParameter, documentNoParameter, productIdParameter, modeOfPaymentParameter, transTypeParameter, baseCurrencyIdParameter, currencyIdParameter, currencySymbolParameter, exchangeRateParameter, commissionParameter, paidByParameter, localCurrencyAmountParameter, amountParameter, amountChargeParameter, balanceAmountParameter, remarksParameter, inputXMLParameter);
        }
    
        public virtual ObjectResult<GetAllAutoGenPrefixes_Result> GetAllAutoGenPrefixes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAutoGenPrefixes_Result>("GetAllAutoGenPrefixes");
        }
    
        public virtual ObjectResult<GetMemberContacts_Result> GetMemberContacts(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMemberContacts_Result>("GetMemberContacts", memberIdParameter);
        }
    
        public virtual ObjectResult<getNameofCharge_Result> getNameofCharge(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getNameofCharge_Result>("getNameofCharge", descriptionParameter);
        }
    
        public virtual ObjectResult<ParseXMLToTable_Result> ParseXMLToTable(string inputXML)
        {
            var inputXMLParameter = inputXML != null ?
                new ObjectParameter("InputXML", inputXML) :
                new ObjectParameter("InputXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ParseXMLToTable_Result>("ParseXMLToTable", inputXMLParameter);
        }
    
        public virtual ObjectResult<pro_AddEditAutoGenNumber_Result> pro_AddEditAutoGenNumber(Nullable<int> autoGenNumberId, string autoGenNumberText, Nullable<int> autoPrefixId, Nullable<bool> usePrefix, Nullable<int> start, Nullable<int> stop, Nullable<int> startFrom, Nullable<bool> allowManual, Nullable<bool> delete)
        {
            var autoGenNumberIdParameter = autoGenNumberId.HasValue ?
                new ObjectParameter("AutoGenNumberId", autoGenNumberId) :
                new ObjectParameter("AutoGenNumberId", typeof(int));
    
            var autoGenNumberTextParameter = autoGenNumberText != null ?
                new ObjectParameter("AutoGenNumberText", autoGenNumberText) :
                new ObjectParameter("AutoGenNumberText", typeof(string));
    
            var autoPrefixIdParameter = autoPrefixId.HasValue ?
                new ObjectParameter("AutoPrefixId", autoPrefixId) :
                new ObjectParameter("AutoPrefixId", typeof(int));
    
            var usePrefixParameter = usePrefix.HasValue ?
                new ObjectParameter("UsePrefix", usePrefix) :
                new ObjectParameter("UsePrefix", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var stopParameter = stop.HasValue ?
                new ObjectParameter("Stop", stop) :
                new ObjectParameter("Stop", typeof(int));
    
            var startFromParameter = startFrom.HasValue ?
                new ObjectParameter("StartFrom", startFrom) :
                new ObjectParameter("StartFrom", typeof(int));
    
            var allowManualParameter = allowManual.HasValue ?
                new ObjectParameter("AllowManual", allowManual) :
                new ObjectParameter("AllowManual", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_AddEditAutoGenNumber_Result>("pro_AddEditAutoGenNumber", autoGenNumberIdParameter, autoGenNumberTextParameter, autoPrefixIdParameter, usePrefixParameter, startParameter, stopParameter, startFromParameter, allowManualParameter, deleteParameter);
        }
    
        public virtual ObjectResult<pro_AddEditAutoGenSetup_Result> pro_AddEditAutoGenSetup(Nullable<int> setupId, string setName, Nullable<int> autoGenNumberId, Nullable<bool> isManual, Nullable<bool> delete)
        {
            var setupIdParameter = setupId.HasValue ?
                new ObjectParameter("SetupId", setupId) :
                new ObjectParameter("SetupId", typeof(int));
    
            var setNameParameter = setName != null ?
                new ObjectParameter("SetName", setName) :
                new ObjectParameter("SetName", typeof(string));
    
            var autoGenNumberIdParameter = autoGenNumberId.HasValue ?
                new ObjectParameter("AutoGenNumberId", autoGenNumberId) :
                new ObjectParameter("AutoGenNumberId", typeof(int));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_AddEditAutoGenSetup_Result>("pro_AddEditAutoGenSetup", setupIdParameter, setNameParameter, autoGenNumberIdParameter, isManualParameter, deleteParameter);
        }
    
        public virtual ObjectResult<pro_GetAllAutoGenSetups_Result> pro_GetAllAutoGenSetups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_GetAllAutoGenSetups_Result>("pro_GetAllAutoGenSetups");
        }
    
        public virtual ObjectResult<pro_GetAutoGenSetup_Result> pro_GetAutoGenSetup(Nullable<int> setupId)
        {
            var setupIdParameter = setupId.HasValue ?
                new ObjectParameter("SetupId", setupId) :
                new ObjectParameter("SetupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_GetAutoGenSetup_Result>("pro_GetAutoGenSetup", setupIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> pro_GetLoanTypeChargesUsingTariff(Nullable<decimal> amount, Nullable<int> loanChargesListId)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("pro_GetLoanTypeChargesUsingTariff", amountParameter, loanChargesListIdParameter);
        }
    
        public virtual ObjectResult<pro_getMemberEachAccount_Result> pro_getMemberEachAccount(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_getMemberEachAccount_Result>("pro_getMemberEachAccount", productIdParameter);
        }
    
        public virtual ObjectResult<pro_getMemberEachTransactions_Result> pro_getMemberEachTransactions(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pro_getMemberEachTransactions_Result>("pro_getMemberEachTransactions", memberIdParameter);
        }
    
        public virtual int pro_InititializeSetupsName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pro_InititializeSetupsName");
        }
    
        public virtual ObjectResult<string> proc_AccountNumberByProductId(Nullable<int> productId, Nullable<int> memberId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_AccountNumberByProductId", productIdParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<string> proc_AddCustomerAndKin(string customerName, string kinName)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var kinNameParameter = kinName != null ?
                new ObjectParameter("KinName", kinName) :
                new ObjectParameter("KinName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_AddCustomerAndKin", customerNameParameter, kinNameParameter);
        }
    
        public virtual ObjectResult<proc_AddEditAccountTrans_Result> proc_AddEditAccountTrans(Nullable<int> accountTransactionId, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, string memberNo, string documentNo, Nullable<int> productId, string modeOfPayment, string transType, Nullable<int> baseCurrencyId, Nullable<int> currencyId, Nullable<decimal> exchangeRate, Nullable<bool> commission, string paidBy, Nullable<decimal> localCurrencyAmount, Nullable<decimal> amount, string remarks, Nullable<bool> isPercent, Nullable<decimal> amountCharge, Nullable<int> chargeId, Nullable<bool> delete)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(bool));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var localCurrencyAmountParameter = localCurrencyAmount.HasValue ?
                new ObjectParameter("LocalCurrencyAmount", localCurrencyAmount) :
                new ObjectParameter("LocalCurrencyAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isPercentParameter = isPercent.HasValue ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(bool));
    
            var amountChargeParameter = amountCharge.HasValue ?
                new ObjectParameter("AmountCharge", amountCharge) :
                new ObjectParameter("AmountCharge", typeof(decimal));
    
            var chargeIdParameter = chargeId.HasValue ?
                new ObjectParameter("ChargeId", chargeId) :
                new ObjectParameter("ChargeId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditAccountTrans_Result>("proc_AddEditAccountTrans", accountTransactionIdParameter, transactionDateParameter, valueDateParameter, memberNoParameter, documentNoParameter, productIdParameter, modeOfPaymentParameter, transTypeParameter, baseCurrencyIdParameter, currencyIdParameter, exchangeRateParameter, commissionParameter, paidByParameter, localCurrencyAmountParameter, amountParameter, remarksParameter, isPercentParameter, amountChargeParameter, chargeIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditAccTrans_Result> proc_AddEditAccTrans(Nullable<int> accountTransactionId, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, string memberNo, string documentNo, Nullable<int> productId, string modeOfPayment, string transType, Nullable<int> baseCurrencyId, Nullable<int> currencyId, Nullable<decimal> exchangeRate, string commission, string paidBy, Nullable<decimal> localCurrencyAmount, Nullable<decimal> amount, string remarks, Nullable<bool> delete)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var commissionParameter = commission != null ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(string));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var localCurrencyAmountParameter = localCurrencyAmount.HasValue ?
                new ObjectParameter("LocalCurrencyAmount", localCurrencyAmount) :
                new ObjectParameter("LocalCurrencyAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditAccTrans_Result>("proc_AddEditAccTrans", accountTransactionIdParameter, transactionDateParameter, valueDateParameter, memberNoParameter, documentNoParameter, productIdParameter, modeOfPaymentParameter, transTypeParameter, baseCurrencyIdParameter, currencyIdParameter, exchangeRateParameter, commissionParameter, paidByParameter, localCurrencyAmountParameter, amountParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditAllCharge_Result> proc_AddEditAllCharge(Nullable<int> chargesId, string code, string description, Nullable<bool> isPercent, Nullable<decimal> value, Nullable<bool> tariff, Nullable<decimal> tariffAmount, Nullable<bool> ignoreLowLimit, Nullable<decimal> lowerLimit, Nullable<decimal> upperLimit, Nullable<bool> delete)
        {
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isPercentParameter = isPercent.HasValue ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(bool));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(bool));
    
            var tariffAmountParameter = tariffAmount.HasValue ?
                new ObjectParameter("TariffAmount", tariffAmount) :
                new ObjectParameter("TariffAmount", typeof(decimal));
    
            var ignoreLowLimitParameter = ignoreLowLimit.HasValue ?
                new ObjectParameter("IgnoreLowLimit", ignoreLowLimit) :
                new ObjectParameter("IgnoreLowLimit", typeof(bool));
    
            var lowerLimitParameter = lowerLimit.HasValue ?
                new ObjectParameter("LowerLimit", lowerLimit) :
                new ObjectParameter("LowerLimit", typeof(decimal));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditAllCharge_Result>("proc_AddEditAllCharge", chargesIdParameter, codeParameter, descriptionParameter, isPercentParameter, valueParameter, tariffParameter, tariffAmountParameter, ignoreLowLimitParameter, lowerLimitParameter, upperLimitParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditAutoGenPrefixe_Result> proc_AddEditAutoGenPrefixe(Nullable<int> autoPrefixId, string prefixName, string prefixText, Nullable<bool> isSystemAssisted, Nullable<bool> isDateRelated, Nullable<bool> today, Nullable<bool> month, Nullable<bool> year, Nullable<bool> branchPrefix, string useBranchPrefix, string useGroupPrefix, Nullable<bool> delete)
        {
            var autoPrefixIdParameter = autoPrefixId.HasValue ?
                new ObjectParameter("AutoPrefixId", autoPrefixId) :
                new ObjectParameter("AutoPrefixId", typeof(int));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var prefixTextParameter = prefixText != null ?
                new ObjectParameter("PrefixText", prefixText) :
                new ObjectParameter("PrefixText", typeof(string));
    
            var isSystemAssistedParameter = isSystemAssisted.HasValue ?
                new ObjectParameter("IsSystemAssisted", isSystemAssisted) :
                new ObjectParameter("IsSystemAssisted", typeof(bool));
    
            var isDateRelatedParameter = isDateRelated.HasValue ?
                new ObjectParameter("IsDateRelated", isDateRelated) :
                new ObjectParameter("IsDateRelated", typeof(bool));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(bool));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(bool));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(bool));
    
            var branchPrefixParameter = branchPrefix.HasValue ?
                new ObjectParameter("BranchPrefix", branchPrefix) :
                new ObjectParameter("BranchPrefix", typeof(bool));
    
            var useBranchPrefixParameter = useBranchPrefix != null ?
                new ObjectParameter("UseBranchPrefix", useBranchPrefix) :
                new ObjectParameter("UseBranchPrefix", typeof(string));
    
            var useGroupPrefixParameter = useGroupPrefix != null ?
                new ObjectParameter("UseGroupPrefix", useGroupPrefix) :
                new ObjectParameter("UseGroupPrefix", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditAutoGenPrefixe_Result>("proc_AddEditAutoGenPrefixe", autoPrefixIdParameter, prefixNameParameter, prefixTextParameter, isSystemAssistedParameter, isDateRelatedParameter, todayParameter, monthParameter, yearParameter, branchPrefixParameter, useBranchPrefixParameter, useGroupPrefixParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditBankBranches_Result> proc_AddEditBankBranches(Nullable<int> branchId, string branchName, Nullable<int> bankId, Nullable<bool> delete)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditBankBranches_Result>("proc_AddEditBankBranches", branchIdParameter, branchNameParameter, bankIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditBanks_Result> proc_AddEditBanks(Nullable<int> bankId, string bankName, Nullable<bool> delete)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditBanks_Result>("proc_AddEditBanks", bankIdParameter, bankNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditBeneficiaries_Result> proc_AddEditBeneficiaries(Nullable<int> beneficiaryId, Nullable<int> memberId, Nullable<int> relationshipId, string fullName, string idNo, Nullable<System.DateTime> dOB, string phoneNumber, string town, Nullable<decimal> value, string code, string remarks, Nullable<bool> delete)
        {
            var beneficiaryIdParameter = beneficiaryId.HasValue ?
                new ObjectParameter("BeneficiaryId", beneficiaryId) :
                new ObjectParameter("BeneficiaryId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var relationshipIdParameter = relationshipId.HasValue ?
                new ObjectParameter("RelationshipId", relationshipId) :
                new ObjectParameter("RelationshipId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditBeneficiaries_Result>("proc_AddEditBeneficiaries", beneficiaryIdParameter, memberIdParameter, relationshipIdParameter, fullNameParameter, idNoParameter, dOBParameter, phoneNumberParameter, townParameter, valueParameter, codeParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditChargeFinal_Result> proc_AddEditChargeFinal(Nullable<int> chargesId, string code, string description, Nullable<bool> isPercent, Nullable<decimal> value, Nullable<bool> tariff, Nullable<decimal> tariffAmount, Nullable<bool> ignoreLowLimit, Nullable<decimal> lowerLimit, Nullable<decimal> upperLimit, Nullable<bool> delete)
        {
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isPercentParameter = isPercent.HasValue ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(bool));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(bool));
    
            var tariffAmountParameter = tariffAmount.HasValue ?
                new ObjectParameter("TariffAmount", tariffAmount) :
                new ObjectParameter("TariffAmount", typeof(decimal));
    
            var ignoreLowLimitParameter = ignoreLowLimit.HasValue ?
                new ObjectParameter("IgnoreLowLimit", ignoreLowLimit) :
                new ObjectParameter("IgnoreLowLimit", typeof(bool));
    
            var lowerLimitParameter = lowerLimit.HasValue ?
                new ObjectParameter("LowerLimit", lowerLimit) :
                new ObjectParameter("LowerLimit", typeof(decimal));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditChargeFinal_Result>("proc_AddEditChargeFinal", chargesIdParameter, codeParameter, descriptionParameter, isPercentParameter, valueParameter, tariffParameter, tariffAmountParameter, ignoreLowLimitParameter, lowerLimitParameter, upperLimitParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditClientType_Result> proc_AddEditClientType(Nullable<int> clientTypeId, string clientTypeName, Nullable<bool> delete)
        {
            var clientTypeIdParameter = clientTypeId.HasValue ?
                new ObjectParameter("ClientTypeId", clientTypeId) :
                new ObjectParameter("ClientTypeId", typeof(int));
    
            var clientTypeNameParameter = clientTypeName != null ?
                new ObjectParameter("ClientTypeName", clientTypeName) :
                new ObjectParameter("ClientTypeName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditClientType_Result>("proc_AddEditClientType", clientTypeIdParameter, clientTypeNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditCollaterals_Result> proc_AddEditCollaterals(Nullable<int> collateralId, string collateralName, Nullable<bool> hasTimeLimit, Nullable<bool> delete)
        {
            var collateralIdParameter = collateralId.HasValue ?
                new ObjectParameter("CollateralId", collateralId) :
                new ObjectParameter("CollateralId", typeof(int));
    
            var collateralNameParameter = collateralName != null ?
                new ObjectParameter("CollateralName", collateralName) :
                new ObjectParameter("CollateralName", typeof(string));
    
            var hasTimeLimitParameter = hasTimeLimit.HasValue ?
                new ObjectParameter("HasTimeLimit", hasTimeLimit) :
                new ObjectParameter("HasTimeLimit", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditCollaterals_Result>("proc_AddEditCollaterals", collateralIdParameter, collateralNameParameter, hasTimeLimitParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditCompanyBranches_Result> proc_AddEditCompanyBranches(Nullable<int> companyBranchesId, string code, string name, Nullable<bool> delete)
        {
            var companyBranchesIdParameter = companyBranchesId.HasValue ?
                new ObjectParameter("CompanyBranchesId", companyBranchesId) :
                new ObjectParameter("CompanyBranchesId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditCompanyBranches_Result>("proc_AddEditCompanyBranches", companyBranchesIdParameter, codeParameter, nameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditContacts_Result> proc_AddEditContacts(Nullable<int> contactId, string payroll, Nullable<int> memberId, string fullName, string searchName, string idNo, Nullable<bool> isPerson, string nHIFNo, string kRAPin, string nSSFNo, string hudumaNo, string email, Nullable<System.DateTime> dOB, Nullable<int> titleId, string gender, Nullable<int> maritalStatusId, string telephone1, string telephone2, string telephone3, string phoneNo, string faxNumber, string physicalLocation, string postalAddress, Nullable<int> memberStatusId, Nullable<bool> blocked, Nullable<int> levelofEducationId, Nullable<bool> isRegister, Nullable<bool> isDormancy, string remark, Nullable<int> securityQuestion, string registrationCode, Nullable<int> nationalityId, Nullable<System.DateTime> companyRegistrationDate, Nullable<System.DateTime> registrationDate, string companyCertificateNo, Nullable<int> bankId, Nullable<int> bankBranchId, string bankAccountNo, Nullable<int> currencyId, string securityAnswer, Nullable<bool> delete)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var payrollParameter = payroll != null ?
                new ObjectParameter("Payroll", payroll) :
                new ObjectParameter("Payroll", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var isPersonParameter = isPerson.HasValue ?
                new ObjectParameter("IsPerson", isPerson) :
                new ObjectParameter("IsPerson", typeof(bool));
    
            var nHIFNoParameter = nHIFNo != null ?
                new ObjectParameter("NHIFNo", nHIFNo) :
                new ObjectParameter("NHIFNo", typeof(string));
    
            var kRAPinParameter = kRAPin != null ?
                new ObjectParameter("KRAPin", kRAPin) :
                new ObjectParameter("KRAPin", typeof(string));
    
            var nSSFNoParameter = nSSFNo != null ?
                new ObjectParameter("NSSFNo", nSSFNo) :
                new ObjectParameter("NSSFNo", typeof(string));
    
            var hudumaNoParameter = hudumaNo != null ?
                new ObjectParameter("HudumaNo", hudumaNo) :
                new ObjectParameter("HudumaNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var physicalLocationParameter = physicalLocation != null ?
                new ObjectParameter("PhysicalLocation", physicalLocation) :
                new ObjectParameter("PhysicalLocation", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var memberStatusIdParameter = memberStatusId.HasValue ?
                new ObjectParameter("MemberStatusId", memberStatusId) :
                new ObjectParameter("MemberStatusId", typeof(int));
    
            var blockedParameter = blocked.HasValue ?
                new ObjectParameter("Blocked", blocked) :
                new ObjectParameter("Blocked", typeof(bool));
    
            var levelofEducationIdParameter = levelofEducationId.HasValue ?
                new ObjectParameter("LevelofEducationId", levelofEducationId) :
                new ObjectParameter("LevelofEducationId", typeof(int));
    
            var isRegisterParameter = isRegister.HasValue ?
                new ObjectParameter("IsRegister", isRegister) :
                new ObjectParameter("IsRegister", typeof(bool));
    
            var isDormancyParameter = isDormancy.HasValue ?
                new ObjectParameter("IsDormancy", isDormancy) :
                new ObjectParameter("IsDormancy", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var securityQuestionParameter = securityQuestion.HasValue ?
                new ObjectParameter("SecurityQuestion", securityQuestion) :
                new ObjectParameter("SecurityQuestion", typeof(int));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var companyRegistrationDateParameter = companyRegistrationDate.HasValue ?
                new ObjectParameter("CompanyRegistrationDate", companyRegistrationDate) :
                new ObjectParameter("CompanyRegistrationDate", typeof(System.DateTime));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var companyCertificateNoParameter = companyCertificateNo != null ?
                new ObjectParameter("CompanyCertificateNo", companyCertificateNo) :
                new ObjectParameter("CompanyCertificateNo", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankBranchIdParameter = bankBranchId.HasValue ?
                new ObjectParameter("BankBranchId", bankBranchId) :
                new ObjectParameter("BankBranchId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditContacts_Result>("proc_AddEditContacts", contactIdParameter, payrollParameter, memberIdParameter, fullNameParameter, searchNameParameter, idNoParameter, isPersonParameter, nHIFNoParameter, kRAPinParameter, nSSFNoParameter, hudumaNoParameter, emailParameter, dOBParameter, titleIdParameter, genderParameter, maritalStatusIdParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, phoneNoParameter, faxNumberParameter, physicalLocationParameter, postalAddressParameter, memberStatusIdParameter, blockedParameter, levelofEducationIdParameter, isRegisterParameter, isDormancyParameter, remarkParameter, securityQuestionParameter, registrationCodeParameter, nationalityIdParameter, companyRegistrationDateParameter, registrationDateParameter, companyCertificateNoParameter, bankIdParameter, bankBranchIdParameter, bankAccountNoParameter, currencyIdParameter, securityAnswerParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditCreditOfficers_Result> proc_AddEditCreditOfficers(Nullable<int> creditOfficerId, string code, string fullName, Nullable<System.DateTime> dateJoined, string idNo, string phoneNumber, string email, string address, string remarks, Nullable<bool> delete)
        {
            var creditOfficerIdParameter = creditOfficerId.HasValue ?
                new ObjectParameter("CreditOfficerId", creditOfficerId) :
                new ObjectParameter("CreditOfficerId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var dateJoinedParameter = dateJoined.HasValue ?
                new ObjectParameter("DateJoined", dateJoined) :
                new ObjectParameter("DateJoined", typeof(System.DateTime));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditCreditOfficers_Result>("proc_AddEditCreditOfficers", creditOfficerIdParameter, codeParameter, fullNameParameter, dateJoinedParameter, idNoParameter, phoneNumberParameter, emailParameter, addressParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditCurrency_Result> proc_AddEditCurrency(Nullable<int> currencyId, string currencyName, string currencySymbol, Nullable<bool> isMainCurrency, Nullable<bool> delete)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencySymbolParameter = currencySymbol != null ?
                new ObjectParameter("CurrencySymbol", currencySymbol) :
                new ObjectParameter("CurrencySymbol", typeof(string));
    
            var isMainCurrencyParameter = isMainCurrency.HasValue ?
                new ObjectParameter("IsMainCurrency", isMainCurrency) :
                new ObjectParameter("IsMainCurrency", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditCurrency_Result>("proc_AddEditCurrency", currencyIdParameter, currencyNameParameter, currencySymbolParameter, isMainCurrencyParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditDocumentTypes_Result> proc_AddEditDocumentTypes(Nullable<int> documentTypeId, string documentTypeName, Nullable<bool> delete)
        {
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditDocumentTypes_Result>("proc_AddEditDocumentTypes", documentTypeIdParameter, documentTypeNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditExchangeRate_Result> proc_AddEditExchangeRate(Nullable<int> exchangeRateId, Nullable<decimal> buyRate, Nullable<decimal> sellRate, Nullable<int> currencyId, Nullable<bool> delete)
        {
            var exchangeRateIdParameter = exchangeRateId.HasValue ?
                new ObjectParameter("ExchangeRateId", exchangeRateId) :
                new ObjectParameter("ExchangeRateId", typeof(int));
    
            var buyRateParameter = buyRate.HasValue ?
                new ObjectParameter("BuyRate", buyRate) :
                new ObjectParameter("BuyRate", typeof(decimal));
    
            var sellRateParameter = sellRate.HasValue ?
                new ObjectParameter("SellRate", sellRate) :
                new ObjectParameter("SellRate", typeof(decimal));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditExchangeRate_Result>("proc_AddEditExchangeRate", exchangeRateIdParameter, buyRateParameter, sellRateParameter, currencyIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditFiles_Result> proc_AddEditFiles(Nullable<int> fileId, string fileName, Nullable<int> documentTypeId, Nullable<bool> delete)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditFiles_Result>("proc_AddEditFiles", fileIdParameter, fileNameParameter, documentTypeIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditFinalCharge_Result> proc_AddEditFinalCharge(Nullable<int> chargesId, string code, string description, Nullable<bool> isPercent, Nullable<decimal> value, Nullable<bool> tariff, Nullable<decimal> tariffAmount, Nullable<bool> ignoreLowLimit, Nullable<decimal> lowerLimit, Nullable<decimal> upperLimit, Nullable<bool> delete)
        {
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isPercentParameter = isPercent.HasValue ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(bool));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(bool));
    
            var tariffAmountParameter = tariffAmount.HasValue ?
                new ObjectParameter("TariffAmount", tariffAmount) :
                new ObjectParameter("TariffAmount", typeof(decimal));
    
            var ignoreLowLimitParameter = ignoreLowLimit.HasValue ?
                new ObjectParameter("IgnoreLowLimit", ignoreLowLimit) :
                new ObjectParameter("IgnoreLowLimit", typeof(bool));
    
            var lowerLimitParameter = lowerLimit.HasValue ?
                new ObjectParameter("LowerLimit", lowerLimit) :
                new ObjectParameter("LowerLimit", typeof(decimal));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditFinalCharge_Result>("proc_AddEditFinalCharge", chargesIdParameter, codeParameter, descriptionParameter, isPercentParameter, valueParameter, tariffParameter, tariffAmountParameter, ignoreLowLimitParameter, lowerLimitParameter, upperLimitParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditGender_Result> proc_AddEditGender(Nullable<int> genderId, string genderName, Nullable<bool> delete)
        {
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var genderNameParameter = genderName != null ?
                new ObjectParameter("GenderName", genderName) :
                new ObjectParameter("GenderName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditGender_Result>("proc_AddEditGender", genderIdParameter, genderNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditKin_Result> proc_AddEditKin(Nullable<int> kinId, Nullable<int> memberId, Nullable<int> relationId, string fullName, string address, string phoneNumber, string town, Nullable<System.DateTime> dOB, string idNo, string remarks, Nullable<bool> delete)
        {
            var kinIdParameter = kinId.HasValue ?
                new ObjectParameter("KinId", kinId) :
                new ObjectParameter("KinId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var relationIdParameter = relationId.HasValue ?
                new ObjectParameter("RelationId", relationId) :
                new ObjectParameter("RelationId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var townParameter = town != null ?
                new ObjectParameter("Town", town) :
                new ObjectParameter("Town", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditKin_Result>("proc_AddEditKin", kinIdParameter, memberIdParameter, relationIdParameter, fullNameParameter, addressParameter, phoneNumberParameter, townParameter, dOBParameter, idNoParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLevelofEducations_Result> proc_AddEditLevelofEducations(Nullable<int> levelofEducationId, string levelofEducationName, Nullable<bool> delete)
        {
            var levelofEducationIdParameter = levelofEducationId.HasValue ?
                new ObjectParameter("LevelofEducationId", levelofEducationId) :
                new ObjectParameter("LevelofEducationId", typeof(int));
    
            var levelofEducationNameParameter = levelofEducationName != null ?
                new ObjectParameter("LevelofEducationName", levelofEducationName) :
                new ObjectParameter("LevelofEducationName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLevelofEducations_Result>("proc_AddEditLevelofEducations", levelofEducationIdParameter, levelofEducationNameParameter, deleteParameter);
        }
    
        public virtual int proc_AddEditLoan(Nullable<int> loanId, Nullable<int> loanTypeId, Nullable<int> memberId, string code, string manualRef, Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<System.DateTime> applicationDate, Nullable<int> periodFrequency, Nullable<int> repayPeriod, Nullable<bool> isMarkUpBased, Nullable<decimal> markupAmount, Nullable<decimal> interest, Nullable<int> status, Nullable<System.DateTime> statusDate, Nullable<int> purposeId, Nullable<decimal> grossPay, Nullable<decimal> netPay, string loanSeries, Nullable<decimal> totalShares, Nullable<decimal> freeShares, Nullable<bool> isMigrated, Nullable<int> creditOfficerId, Nullable<int> donorId, Nullable<int> currencyId, Nullable<int> branchId, Nullable<bool> delete)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var manualRefParameter = manualRef != null ?
                new ObjectParameter("ManualRef", manualRef) :
                new ObjectParameter("ManualRef", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var periodFrequencyParameter = periodFrequency.HasValue ?
                new ObjectParameter("PeriodFrequency", periodFrequency) :
                new ObjectParameter("PeriodFrequency", typeof(int));
    
            var repayPeriodParameter = repayPeriod.HasValue ?
                new ObjectParameter("RepayPeriod", repayPeriod) :
                new ObjectParameter("RepayPeriod", typeof(int));
    
            var isMarkUpBasedParameter = isMarkUpBased.HasValue ?
                new ObjectParameter("IsMarkUpBased", isMarkUpBased) :
                new ObjectParameter("IsMarkUpBased", typeof(bool));
    
            var markupAmountParameter = markupAmount.HasValue ?
                new ObjectParameter("MarkupAmount", markupAmount) :
                new ObjectParameter("MarkupAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var purposeIdParameter = purposeId.HasValue ?
                new ObjectParameter("PurposeId", purposeId) :
                new ObjectParameter("PurposeId", typeof(int));
    
            var grossPayParameter = grossPay.HasValue ?
                new ObjectParameter("GrossPay", grossPay) :
                new ObjectParameter("GrossPay", typeof(decimal));
    
            var netPayParameter = netPay.HasValue ?
                new ObjectParameter("NetPay", netPay) :
                new ObjectParameter("NetPay", typeof(decimal));
    
            var loanSeriesParameter = loanSeries != null ?
                new ObjectParameter("LoanSeries", loanSeries) :
                new ObjectParameter("LoanSeries", typeof(string));
    
            var totalSharesParameter = totalShares.HasValue ?
                new ObjectParameter("TotalShares", totalShares) :
                new ObjectParameter("TotalShares", typeof(decimal));
    
            var freeSharesParameter = freeShares.HasValue ?
                new ObjectParameter("FreeShares", freeShares) :
                new ObjectParameter("FreeShares", typeof(decimal));
    
            var isMigratedParameter = isMigrated.HasValue ?
                new ObjectParameter("IsMigrated", isMigrated) :
                new ObjectParameter("IsMigrated", typeof(bool));
    
            var creditOfficerIdParameter = creditOfficerId.HasValue ?
                new ObjectParameter("CreditOfficerId", creditOfficerId) :
                new ObjectParameter("CreditOfficerId", typeof(int));
    
            var donorIdParameter = donorId.HasValue ?
                new ObjectParameter("DonorId", donorId) :
                new ObjectParameter("DonorId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddEditLoan", loanIdParameter, loanTypeIdParameter, memberIdParameter, codeParameter, manualRefParameter, loanAmountParameter, interestRateParameter, applicationDateParameter, periodFrequencyParameter, repayPeriodParameter, isMarkUpBasedParameter, markupAmountParameter, interestParameter, statusParameter, statusDateParameter, purposeIdParameter, grossPayParameter, netPayParameter, loanSeriesParameter, totalSharesParameter, freeSharesParameter, isMigratedParameter, creditOfficerIdParameter, donorIdParameter, currencyIdParameter, branchIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanChargeListTariff_Result> proc_AddEditLoanChargeListTariff(Nullable<int> loanChargesListTariffId, Nullable<int> loanChargesListId, Nullable<decimal> fromInterval, Nullable<decimal> toInterval, Nullable<decimal> amount, Nullable<bool> delete)
        {
            var loanChargesListTariffIdParameter = loanChargesListTariffId.HasValue ?
                new ObjectParameter("LoanChargesListTariffId", loanChargesListTariffId) :
                new ObjectParameter("LoanChargesListTariffId", typeof(int));
    
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            var fromIntervalParameter = fromInterval.HasValue ?
                new ObjectParameter("FromInterval", fromInterval) :
                new ObjectParameter("FromInterval", typeof(decimal));
    
            var toIntervalParameter = toInterval.HasValue ?
                new ObjectParameter("ToInterval", toInterval) :
                new ObjectParameter("ToInterval", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanChargeListTariff_Result>("proc_AddEditLoanChargeListTariff", loanChargesListTariffIdParameter, loanChargesListIdParameter, fromIntervalParameter, toIntervalParameter, amountParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanChargeListTariffs_Result> proc_AddEditLoanChargeListTariffs(Nullable<int> loanChargesListTariffId, Nullable<int> loanChargesListId, Nullable<decimal> fromInterval, Nullable<decimal> toInterval, Nullable<decimal> amount, Nullable<bool> delete)
        {
            var loanChargesListTariffIdParameter = loanChargesListTariffId.HasValue ?
                new ObjectParameter("LoanChargesListTariffId", loanChargesListTariffId) :
                new ObjectParameter("LoanChargesListTariffId", typeof(int));
    
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            var fromIntervalParameter = fromInterval.HasValue ?
                new ObjectParameter("FromInterval", fromInterval) :
                new ObjectParameter("FromInterval", typeof(decimal));
    
            var toIntervalParameter = toInterval.HasValue ?
                new ObjectParameter("ToInterval", toInterval) :
                new ObjectParameter("ToInterval", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanChargeListTariffs_Result>("proc_AddEditLoanChargeListTariffs", loanChargesListTariffIdParameter, loanChargesListIdParameter, fromIntervalParameter, toIntervalParameter, amountParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanChargesList_Result> proc_AddEditLoanChargesList(Nullable<int> loanChargesListId, string name, Nullable<bool> recur, Nullable<bool> includeInterest, Nullable<bool> isTariffBased, Nullable<bool> delete)
        {
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var recurParameter = recur.HasValue ?
                new ObjectParameter("Recur", recur) :
                new ObjectParameter("Recur", typeof(bool));
    
            var includeInterestParameter = includeInterest.HasValue ?
                new ObjectParameter("IncludeInterest", includeInterest) :
                new ObjectParameter("IncludeInterest", typeof(bool));
    
            var isTariffBasedParameter = isTariffBased.HasValue ?
                new ObjectParameter("IsTariffBased", isTariffBased) :
                new ObjectParameter("IsTariffBased", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanChargesList_Result>("proc_AddEditLoanChargesList", loanChargesListIdParameter, nameParameter, recurParameter, includeInterestParameter, isTariffBasedParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanChargesLists_Result> proc_AddEditLoanChargesLists(Nullable<int> loanChargesListId, string name, Nullable<bool> recur, Nullable<bool> includeInterest, Nullable<bool> isTariffBased, Nullable<bool> delete)
        {
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var recurParameter = recur.HasValue ?
                new ObjectParameter("Recur", recur) :
                new ObjectParameter("Recur", typeof(bool));
    
            var includeInterestParameter = includeInterest.HasValue ?
                new ObjectParameter("IncludeInterest", includeInterest) :
                new ObjectParameter("IncludeInterest", typeof(bool));
    
            var isTariffBasedParameter = isTariffBased.HasValue ?
                new ObjectParameter("IsTariffBased", isTariffBased) :
                new ObjectParameter("IsTariffBased", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanChargesLists_Result>("proc_AddEditLoanChargesLists", loanChargesListIdParameter, nameParameter, recurParameter, includeInterestParameter, isTariffBasedParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanCollateral_Result> proc_AddEditLoanCollateral(Nullable<int> loanCollateralId, Nullable<int> loanId, Nullable<int> collateralId, string ownerName, string registrationDetails, Nullable<decimal> actualValue, Nullable<decimal> forcedSaleValue, string remarks, Nullable<System.DateTime> expiryDate, Nullable<bool> delete)
        {
            var loanCollateralIdParameter = loanCollateralId.HasValue ?
                new ObjectParameter("LoanCollateralId", loanCollateralId) :
                new ObjectParameter("LoanCollateralId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var collateralIdParameter = collateralId.HasValue ?
                new ObjectParameter("CollateralId", collateralId) :
                new ObjectParameter("CollateralId", typeof(int));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var registrationDetailsParameter = registrationDetails != null ?
                new ObjectParameter("RegistrationDetails", registrationDetails) :
                new ObjectParameter("RegistrationDetails", typeof(string));
    
            var actualValueParameter = actualValue.HasValue ?
                new ObjectParameter("ActualValue", actualValue) :
                new ObjectParameter("ActualValue", typeof(decimal));
    
            var forcedSaleValueParameter = forcedSaleValue.HasValue ?
                new ObjectParameter("ForcedSaleValue", forcedSaleValue) :
                new ObjectParameter("ForcedSaleValue", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanCollateral_Result>("proc_AddEditLoanCollateral", loanCollateralIdParameter, loanIdParameter, collateralIdParameter, ownerNameParameter, registrationDetailsParameter, actualValueParameter, forcedSaleValueParameter, remarksParameter, expiryDateParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanDonors_Result> proc_AddEditLoanDonors(Nullable<int> donorId, string donorName, Nullable<bool> delete)
        {
            var donorIdParameter = donorId.HasValue ?
                new ObjectParameter("DonorId", donorId) :
                new ObjectParameter("DonorId", typeof(int));
    
            var donorNameParameter = donorName != null ?
                new ObjectParameter("DonorName", donorName) :
                new ObjectParameter("DonorName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanDonors_Result>("proc_AddEditLoanDonors", donorIdParameter, donorNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanGuarators_Result> proc_AddEditLoanGuarators(Nullable<int> loanGuarantorId, Nullable<int> loanId, Nullable<int> memberId, string fullName, string idNo, Nullable<int> guarantorTypeId, string loanSerialRef, Nullable<decimal> guaranteedAmount, Nullable<bool> delete)
        {
            var loanGuarantorIdParameter = loanGuarantorId.HasValue ?
                new ObjectParameter("LoanGuarantorId", loanGuarantorId) :
                new ObjectParameter("LoanGuarantorId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var guarantorTypeIdParameter = guarantorTypeId.HasValue ?
                new ObjectParameter("GuarantorTypeId", guarantorTypeId) :
                new ObjectParameter("GuarantorTypeId", typeof(int));
    
            var loanSerialRefParameter = loanSerialRef != null ?
                new ObjectParameter("LoanSerialRef", loanSerialRef) :
                new ObjectParameter("LoanSerialRef", typeof(string));
    
            var guaranteedAmountParameter = guaranteedAmount.HasValue ?
                new ObjectParameter("GuaranteedAmount", guaranteedAmount) :
                new ObjectParameter("GuaranteedAmount", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanGuarators_Result>("proc_AddEditLoanGuarators", loanGuarantorIdParameter, loanIdParameter, memberIdParameter, fullNameParameter, idNoParameter, guarantorTypeIdParameter, loanSerialRefParameter, guaranteedAmountParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanPurposes_Result> proc_AddEditLoanPurposes(Nullable<int> loanPurposeId, string name, Nullable<bool> delete)
        {
            var loanPurposeIdParameter = loanPurposeId.HasValue ?
                new ObjectParameter("LoanPurposeId", loanPurposeId) :
                new ObjectParameter("LoanPurposeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanPurposes_Result>("proc_AddEditLoanPurposes", loanPurposeIdParameter, nameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoans_Result> proc_AddEditLoans(Nullable<int> loanId, Nullable<int> loanTypeId, Nullable<int> memberId, string code, string manualRef, Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<System.DateTime> applicationDate, string periodFrequency, Nullable<int> repayPeriod, Nullable<bool> isMarkUpBased, Nullable<decimal> markupAmount, Nullable<int> interest, Nullable<int> status, Nullable<System.DateTime> statusDate, Nullable<int> purposeId, Nullable<decimal> grossPay, Nullable<decimal> netPay, string loanSeries, Nullable<decimal> totalShares, Nullable<decimal> freeShares, Nullable<bool> isMigrated, Nullable<int> creditOfficerId, Nullable<int> donorId, Nullable<int> currencyId, Nullable<int> branchId, Nullable<bool> delete)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var manualRefParameter = manualRef != null ?
                new ObjectParameter("ManualRef", manualRef) :
                new ObjectParameter("ManualRef", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var periodFrequencyParameter = periodFrequency != null ?
                new ObjectParameter("PeriodFrequency", periodFrequency) :
                new ObjectParameter("PeriodFrequency", typeof(string));
    
            var repayPeriodParameter = repayPeriod.HasValue ?
                new ObjectParameter("RepayPeriod", repayPeriod) :
                new ObjectParameter("RepayPeriod", typeof(int));
    
            var isMarkUpBasedParameter = isMarkUpBased.HasValue ?
                new ObjectParameter("IsMarkUpBased", isMarkUpBased) :
                new ObjectParameter("IsMarkUpBased", typeof(bool));
    
            var markupAmountParameter = markupAmount.HasValue ?
                new ObjectParameter("MarkupAmount", markupAmount) :
                new ObjectParameter("MarkupAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var purposeIdParameter = purposeId.HasValue ?
                new ObjectParameter("PurposeId", purposeId) :
                new ObjectParameter("PurposeId", typeof(int));
    
            var grossPayParameter = grossPay.HasValue ?
                new ObjectParameter("GrossPay", grossPay) :
                new ObjectParameter("GrossPay", typeof(decimal));
    
            var netPayParameter = netPay.HasValue ?
                new ObjectParameter("NetPay", netPay) :
                new ObjectParameter("NetPay", typeof(decimal));
    
            var loanSeriesParameter = loanSeries != null ?
                new ObjectParameter("LoanSeries", loanSeries) :
                new ObjectParameter("LoanSeries", typeof(string));
    
            var totalSharesParameter = totalShares.HasValue ?
                new ObjectParameter("TotalShares", totalShares) :
                new ObjectParameter("TotalShares", typeof(decimal));
    
            var freeSharesParameter = freeShares.HasValue ?
                new ObjectParameter("FreeShares", freeShares) :
                new ObjectParameter("FreeShares", typeof(decimal));
    
            var isMigratedParameter = isMigrated.HasValue ?
                new ObjectParameter("IsMigrated", isMigrated) :
                new ObjectParameter("IsMigrated", typeof(bool));
    
            var creditOfficerIdParameter = creditOfficerId.HasValue ?
                new ObjectParameter("CreditOfficerId", creditOfficerId) :
                new ObjectParameter("CreditOfficerId", typeof(int));
    
            var donorIdParameter = donorId.HasValue ?
                new ObjectParameter("DonorId", donorId) :
                new ObjectParameter("DonorId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoans_Result>("proc_AddEditLoans", loanIdParameter, loanTypeIdParameter, memberIdParameter, codeParameter, manualRefParameter, loanAmountParameter, interestRateParameter, applicationDateParameter, periodFrequencyParameter, repayPeriodParameter, isMarkUpBasedParameter, markupAmountParameter, interestParameter, statusParameter, statusDateParameter, purposeIdParameter, grossPayParameter, netPayParameter, loanSeriesParameter, totalSharesParameter, freeSharesParameter, isMigratedParameter, creditOfficerIdParameter, donorIdParameter, currencyIdParameter, branchIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanStatus_Result> proc_AddEditLoanStatus(Nullable<int> loanStatusId, string loanStatusName, Nullable<bool> delete)
        {
            var loanStatusIdParameter = loanStatusId.HasValue ?
                new ObjectParameter("LoanStatusId", loanStatusId) :
                new ObjectParameter("LoanStatusId", typeof(int));
    
            var loanStatusNameParameter = loanStatusName != null ?
                new ObjectParameter("LoanStatusName", loanStatusName) :
                new ObjectParameter("LoanStatusName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanStatus_Result>("proc_AddEditLoanStatus", loanStatusIdParameter, loanStatusNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoansType_Result> proc_AddEditLoansType(Nullable<int> loanTypeId, string refCode, string description, Nullable<int> maxPeriod, Nullable<int> interestRate, string interestRateFrequency, Nullable<decimal> minAmount, Nullable<decimal> maxAmount, Nullable<decimal> incomeFactor, Nullable<bool> chargeInterestDuringGracePeriod, Nullable<decimal> sharesFactor, Nullable<int> minGuarantors, Nullable<int> maxGuarantors, string interestPayMethod, Nullable<int> defaultPenalty, string defaultPenaltyFrequency, Nullable<int> moratorium, Nullable<int> minShares, string interestCalFormula, Nullable<int> minPeriod, Nullable<decimal> loansFactor, string repaymentFrequency, Nullable<int> gracePeriod, Nullable<bool> applyPenaltyAfterMaturity, Nullable<bool> isSecure, Nullable<bool> consider23rdRule, Nullable<bool> preConsiderInterest, Nullable<bool> forgoneInterest, Nullable<bool> allowPartialDisbursements, Nullable<bool> allowTopups, Nullable<bool> adjustInterestRate, Nullable<bool> considerLoanSeries, Nullable<bool> isMarkupBased, Nullable<decimal> forcedSaleValue, Nullable<bool> useOfZeroShares, Nullable<decimal> marginBaseAmount, string incrementValue, Nullable<bool> isMobileLoan, Nullable<bool> isIncrementFactor, string nearestPrincipleRounding, string principalRoundingType, string nearestInterestRounding, string interestRoundingType, string category, string remarks, Nullable<bool> delete)
        {
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var maxPeriodParameter = maxPeriod.HasValue ?
                new ObjectParameter("MaxPeriod", maxPeriod) :
                new ObjectParameter("MaxPeriod", typeof(int));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(int));
    
            var interestRateFrequencyParameter = interestRateFrequency != null ?
                new ObjectParameter("InterestRateFrequency", interestRateFrequency) :
                new ObjectParameter("InterestRateFrequency", typeof(string));
    
            var minAmountParameter = minAmount.HasValue ?
                new ObjectParameter("MinAmount", minAmount) :
                new ObjectParameter("MinAmount", typeof(decimal));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(decimal));
    
            var incomeFactorParameter = incomeFactor.HasValue ?
                new ObjectParameter("IncomeFactor", incomeFactor) :
                new ObjectParameter("IncomeFactor", typeof(decimal));
    
            var chargeInterestDuringGracePeriodParameter = chargeInterestDuringGracePeriod.HasValue ?
                new ObjectParameter("ChargeInterestDuringGracePeriod", chargeInterestDuringGracePeriod) :
                new ObjectParameter("ChargeInterestDuringGracePeriod", typeof(bool));
    
            var sharesFactorParameter = sharesFactor.HasValue ?
                new ObjectParameter("SharesFactor", sharesFactor) :
                new ObjectParameter("SharesFactor", typeof(decimal));
    
            var minGuarantorsParameter = minGuarantors.HasValue ?
                new ObjectParameter("MinGuarantors", minGuarantors) :
                new ObjectParameter("MinGuarantors", typeof(int));
    
            var maxGuarantorsParameter = maxGuarantors.HasValue ?
                new ObjectParameter("MaxGuarantors", maxGuarantors) :
                new ObjectParameter("MaxGuarantors", typeof(int));
    
            var interestPayMethodParameter = interestPayMethod != null ?
                new ObjectParameter("InterestPayMethod", interestPayMethod) :
                new ObjectParameter("InterestPayMethod", typeof(string));
    
            var defaultPenaltyParameter = defaultPenalty.HasValue ?
                new ObjectParameter("DefaultPenalty", defaultPenalty) :
                new ObjectParameter("DefaultPenalty", typeof(int));
    
            var defaultPenaltyFrequencyParameter = defaultPenaltyFrequency != null ?
                new ObjectParameter("DefaultPenaltyFrequency", defaultPenaltyFrequency) :
                new ObjectParameter("DefaultPenaltyFrequency", typeof(string));
    
            var moratoriumParameter = moratorium.HasValue ?
                new ObjectParameter("Moratorium", moratorium) :
                new ObjectParameter("Moratorium", typeof(int));
    
            var minSharesParameter = minShares.HasValue ?
                new ObjectParameter("MinShares", minShares) :
                new ObjectParameter("MinShares", typeof(int));
    
            var interestCalFormulaParameter = interestCalFormula != null ?
                new ObjectParameter("InterestCalFormula", interestCalFormula) :
                new ObjectParameter("InterestCalFormula", typeof(string));
    
            var minPeriodParameter = minPeriod.HasValue ?
                new ObjectParameter("MinPeriod", minPeriod) :
                new ObjectParameter("MinPeriod", typeof(int));
    
            var loansFactorParameter = loansFactor.HasValue ?
                new ObjectParameter("LoansFactor", loansFactor) :
                new ObjectParameter("LoansFactor", typeof(decimal));
    
            var repaymentFrequencyParameter = repaymentFrequency != null ?
                new ObjectParameter("RepaymentFrequency", repaymentFrequency) :
                new ObjectParameter("RepaymentFrequency", typeof(string));
    
            var gracePeriodParameter = gracePeriod.HasValue ?
                new ObjectParameter("GracePeriod", gracePeriod) :
                new ObjectParameter("GracePeriod", typeof(int));
    
            var applyPenaltyAfterMaturityParameter = applyPenaltyAfterMaturity.HasValue ?
                new ObjectParameter("ApplyPenaltyAfterMaturity", applyPenaltyAfterMaturity) :
                new ObjectParameter("ApplyPenaltyAfterMaturity", typeof(bool));
    
            var isSecureParameter = isSecure.HasValue ?
                new ObjectParameter("IsSecure", isSecure) :
                new ObjectParameter("IsSecure", typeof(bool));
    
            var consider23rdRuleParameter = consider23rdRule.HasValue ?
                new ObjectParameter("Consider23rdRule", consider23rdRule) :
                new ObjectParameter("Consider23rdRule", typeof(bool));
    
            var preConsiderInterestParameter = preConsiderInterest.HasValue ?
                new ObjectParameter("PreConsiderInterest", preConsiderInterest) :
                new ObjectParameter("PreConsiderInterest", typeof(bool));
    
            var forgoneInterestParameter = forgoneInterest.HasValue ?
                new ObjectParameter("ForgoneInterest", forgoneInterest) :
                new ObjectParameter("ForgoneInterest", typeof(bool));
    
            var allowPartialDisbursementsParameter = allowPartialDisbursements.HasValue ?
                new ObjectParameter("AllowPartialDisbursements", allowPartialDisbursements) :
                new ObjectParameter("AllowPartialDisbursements", typeof(bool));
    
            var allowTopupsParameter = allowTopups.HasValue ?
                new ObjectParameter("AllowTopups", allowTopups) :
                new ObjectParameter("AllowTopups", typeof(bool));
    
            var adjustInterestRateParameter = adjustInterestRate.HasValue ?
                new ObjectParameter("AdjustInterestRate", adjustInterestRate) :
                new ObjectParameter("AdjustInterestRate", typeof(bool));
    
            var considerLoanSeriesParameter = considerLoanSeries.HasValue ?
                new ObjectParameter("ConsiderLoanSeries", considerLoanSeries) :
                new ObjectParameter("ConsiderLoanSeries", typeof(bool));
    
            var isMarkupBasedParameter = isMarkupBased.HasValue ?
                new ObjectParameter("IsMarkupBased", isMarkupBased) :
                new ObjectParameter("IsMarkupBased", typeof(bool));
    
            var forcedSaleValueParameter = forcedSaleValue.HasValue ?
                new ObjectParameter("ForcedSaleValue", forcedSaleValue) :
                new ObjectParameter("ForcedSaleValue", typeof(decimal));
    
            var useOfZeroSharesParameter = useOfZeroShares.HasValue ?
                new ObjectParameter("UseOfZeroShares", useOfZeroShares) :
                new ObjectParameter("UseOfZeroShares", typeof(bool));
    
            var marginBaseAmountParameter = marginBaseAmount.HasValue ?
                new ObjectParameter("MarginBaseAmount", marginBaseAmount) :
                new ObjectParameter("MarginBaseAmount", typeof(decimal));
    
            var incrementValueParameter = incrementValue != null ?
                new ObjectParameter("IncrementValue", incrementValue) :
                new ObjectParameter("IncrementValue", typeof(string));
    
            var isMobileLoanParameter = isMobileLoan.HasValue ?
                new ObjectParameter("IsMobileLoan", isMobileLoan) :
                new ObjectParameter("IsMobileLoan", typeof(bool));
    
            var isIncrementFactorParameter = isIncrementFactor.HasValue ?
                new ObjectParameter("IsIncrementFactor", isIncrementFactor) :
                new ObjectParameter("IsIncrementFactor", typeof(bool));
    
            var nearestPrincipleRoundingParameter = nearestPrincipleRounding != null ?
                new ObjectParameter("NearestPrincipleRounding", nearestPrincipleRounding) :
                new ObjectParameter("NearestPrincipleRounding", typeof(string));
    
            var principalRoundingTypeParameter = principalRoundingType != null ?
                new ObjectParameter("PrincipalRoundingType", principalRoundingType) :
                new ObjectParameter("PrincipalRoundingType", typeof(string));
    
            var nearestInterestRoundingParameter = nearestInterestRounding != null ?
                new ObjectParameter("NearestInterestRounding", nearestInterestRounding) :
                new ObjectParameter("NearestInterestRounding", typeof(string));
    
            var interestRoundingTypeParameter = interestRoundingType != null ?
                new ObjectParameter("InterestRoundingType", interestRoundingType) :
                new ObjectParameter("InterestRoundingType", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoansType_Result>("proc_AddEditLoansType", loanTypeIdParameter, refCodeParameter, descriptionParameter, maxPeriodParameter, interestRateParameter, interestRateFrequencyParameter, minAmountParameter, maxAmountParameter, incomeFactorParameter, chargeInterestDuringGracePeriodParameter, sharesFactorParameter, minGuarantorsParameter, maxGuarantorsParameter, interestPayMethodParameter, defaultPenaltyParameter, defaultPenaltyFrequencyParameter, moratoriumParameter, minSharesParameter, interestCalFormulaParameter, minPeriodParameter, loansFactorParameter, repaymentFrequencyParameter, gracePeriodParameter, applyPenaltyAfterMaturityParameter, isSecureParameter, consider23rdRuleParameter, preConsiderInterestParameter, forgoneInterestParameter, allowPartialDisbursementsParameter, allowTopupsParameter, adjustInterestRateParameter, considerLoanSeriesParameter, isMarkupBasedParameter, forcedSaleValueParameter, useOfZeroSharesParameter, marginBaseAmountParameter, incrementValueParameter, isMobileLoanParameter, isIncrementFactorParameter, nearestPrincipleRoundingParameter, principalRoundingTypeParameter, nearestInterestRoundingParameter, interestRoundingTypeParameter, categoryParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanTypeCharges_Result> proc_AddEditLoanTypeCharges(Nullable<int> loanTypeChargesId, Nullable<int> loanChargesListId, Nullable<int> loanTypeId, string name, Nullable<bool> isTariffBased, Nullable<bool> isPercentage, Nullable<decimal> value, Nullable<decimal> amount, Nullable<int> periodToCharge, Nullable<bool> hasLimit, Nullable<decimal> lowerLimit, Nullable<decimal> upperLimit, Nullable<bool> useFormula, string theFormula, Nullable<bool> delete)
        {
            var loanTypeChargesIdParameter = loanTypeChargesId.HasValue ?
                new ObjectParameter("LoanTypeChargesId", loanTypeChargesId) :
                new ObjectParameter("LoanTypeChargesId", typeof(int));
    
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isTariffBasedParameter = isTariffBased.HasValue ?
                new ObjectParameter("IsTariffBased", isTariffBased) :
                new ObjectParameter("IsTariffBased", typeof(bool));
    
            var isPercentageParameter = isPercentage.HasValue ?
                new ObjectParameter("IsPercentage", isPercentage) :
                new ObjectParameter("IsPercentage", typeof(bool));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var periodToChargeParameter = periodToCharge.HasValue ?
                new ObjectParameter("PeriodToCharge", periodToCharge) :
                new ObjectParameter("PeriodToCharge", typeof(int));
    
            var hasLimitParameter = hasLimit.HasValue ?
                new ObjectParameter("HasLimit", hasLimit) :
                new ObjectParameter("HasLimit", typeof(bool));
    
            var lowerLimitParameter = lowerLimit.HasValue ?
                new ObjectParameter("LowerLimit", lowerLimit) :
                new ObjectParameter("LowerLimit", typeof(decimal));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var theFormulaParameter = theFormula != null ?
                new ObjectParameter("TheFormula", theFormula) :
                new ObjectParameter("TheFormula", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanTypeCharges_Result>("proc_AddEditLoanTypeCharges", loanTypeChargesIdParameter, loanChargesListIdParameter, loanTypeIdParameter, nameParameter, isTariffBasedParameter, isPercentageParameter, valueParameter, amountParameter, periodToChargeParameter, hasLimitParameter, lowerLimitParameter, upperLimitParameter, useFormulaParameter, theFormulaParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditMaritals_Result> proc_AddEditMaritals(Nullable<int> maritalStatusId, string maritalStatusName, Nullable<bool> delete)
        {
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var maritalStatusNameParameter = maritalStatusName != null ?
                new ObjectParameter("MaritalStatusName", maritalStatusName) :
                new ObjectParameter("MaritalStatusName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditMaritals_Result>("proc_AddEditMaritals", maritalStatusIdParameter, maritalStatusNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditmember_Result> proc_AddEditmember(Nullable<int> memberId, string payroll, string memberNo, string fullName, string searchName, string idNo, Nullable<bool> isPerson, string nHIFNo, string kRAPin, string nSSFNo, string hudumaNo, string email, Nullable<System.DateTime> dOB, Nullable<int> titleId, string gender, Nullable<int> maritalStatusId, string telephone1, string telephone2, string telephone3, string phoneNo, string faxNumber, string physicalLocation, string postalAddress, Nullable<int> memberStatusId, Nullable<bool> blocked, Nullable<int> levelofEducationId, Nullable<bool> isRegister, Nullable<bool> isDormancy, string remark, Nullable<int> securityQuestion, string registrationCode, Nullable<int> nationalityId, Nullable<System.DateTime> companyRegistrationDate, Nullable<System.DateTime> registrationDate, string companyCertificateNo, Nullable<int> bankId, Nullable<int> bankBranchId, string bankAccountNo, Nullable<int> currencyId, string securityAnswer, Nullable<int> hierarchyId, Nullable<decimal> gross, Nullable<decimal> nett, Nullable<decimal> totalShares, Nullable<decimal> freeShare, Nullable<bool> delete)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var payrollParameter = payroll != null ?
                new ObjectParameter("Payroll", payroll) :
                new ObjectParameter("Payroll", typeof(string));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var isPersonParameter = isPerson.HasValue ?
                new ObjectParameter("IsPerson", isPerson) :
                new ObjectParameter("IsPerson", typeof(bool));
    
            var nHIFNoParameter = nHIFNo != null ?
                new ObjectParameter("NHIFNo", nHIFNo) :
                new ObjectParameter("NHIFNo", typeof(string));
    
            var kRAPinParameter = kRAPin != null ?
                new ObjectParameter("KRAPin", kRAPin) :
                new ObjectParameter("KRAPin", typeof(string));
    
            var nSSFNoParameter = nSSFNo != null ?
                new ObjectParameter("NSSFNo", nSSFNo) :
                new ObjectParameter("NSSFNo", typeof(string));
    
            var hudumaNoParameter = hudumaNo != null ?
                new ObjectParameter("HudumaNo", hudumaNo) :
                new ObjectParameter("HudumaNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var physicalLocationParameter = physicalLocation != null ?
                new ObjectParameter("PhysicalLocation", physicalLocation) :
                new ObjectParameter("PhysicalLocation", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var memberStatusIdParameter = memberStatusId.HasValue ?
                new ObjectParameter("MemberStatusId", memberStatusId) :
                new ObjectParameter("MemberStatusId", typeof(int));
    
            var blockedParameter = blocked.HasValue ?
                new ObjectParameter("Blocked", blocked) :
                new ObjectParameter("Blocked", typeof(bool));
    
            var levelofEducationIdParameter = levelofEducationId.HasValue ?
                new ObjectParameter("LevelofEducationId", levelofEducationId) :
                new ObjectParameter("LevelofEducationId", typeof(int));
    
            var isRegisterParameter = isRegister.HasValue ?
                new ObjectParameter("IsRegister", isRegister) :
                new ObjectParameter("IsRegister", typeof(bool));
    
            var isDormancyParameter = isDormancy.HasValue ?
                new ObjectParameter("IsDormancy", isDormancy) :
                new ObjectParameter("IsDormancy", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var securityQuestionParameter = securityQuestion.HasValue ?
                new ObjectParameter("SecurityQuestion", securityQuestion) :
                new ObjectParameter("SecurityQuestion", typeof(int));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var companyRegistrationDateParameter = companyRegistrationDate.HasValue ?
                new ObjectParameter("CompanyRegistrationDate", companyRegistrationDate) :
                new ObjectParameter("CompanyRegistrationDate", typeof(System.DateTime));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var companyCertificateNoParameter = companyCertificateNo != null ?
                new ObjectParameter("CompanyCertificateNo", companyCertificateNo) :
                new ObjectParameter("CompanyCertificateNo", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankBranchIdParameter = bankBranchId.HasValue ?
                new ObjectParameter("BankBranchId", bankBranchId) :
                new ObjectParameter("BankBranchId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var hierarchyIdParameter = hierarchyId.HasValue ?
                new ObjectParameter("HierarchyId", hierarchyId) :
                new ObjectParameter("HierarchyId", typeof(int));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var nettParameter = nett.HasValue ?
                new ObjectParameter("Nett", nett) :
                new ObjectParameter("Nett", typeof(decimal));
    
            var totalSharesParameter = totalShares.HasValue ?
                new ObjectParameter("TotalShares", totalShares) :
                new ObjectParameter("TotalShares", typeof(decimal));
    
            var freeShareParameter = freeShare.HasValue ?
                new ObjectParameter("FreeShare", freeShare) :
                new ObjectParameter("FreeShare", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditmember_Result>("proc_AddEditmember", memberIdParameter, payrollParameter, memberNoParameter, fullNameParameter, searchNameParameter, idNoParameter, isPersonParameter, nHIFNoParameter, kRAPinParameter, nSSFNoParameter, hudumaNoParameter, emailParameter, dOBParameter, titleIdParameter, genderParameter, maritalStatusIdParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, phoneNoParameter, faxNumberParameter, physicalLocationParameter, postalAddressParameter, memberStatusIdParameter, blockedParameter, levelofEducationIdParameter, isRegisterParameter, isDormancyParameter, remarkParameter, securityQuestionParameter, registrationCodeParameter, nationalityIdParameter, companyRegistrationDateParameter, registrationDateParameter, companyCertificateNoParameter, bankIdParameter, bankBranchIdParameter, bankAccountNoParameter, currencyIdParameter, securityAnswerParameter, hierarchyIdParameter, grossParameter, nettParameter, totalSharesParameter, freeShareParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditMemberFiles_Result> proc_AddEditMemberFiles(Nullable<int> memberDocumentId, string fileName, string fileDecription, string documentTypeName, Nullable<bool> delete)
        {
            var memberDocumentIdParameter = memberDocumentId.HasValue ?
                new ObjectParameter("MemberDocumentId", memberDocumentId) :
                new ObjectParameter("MemberDocumentId", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileDecriptionParameter = fileDecription != null ?
                new ObjectParameter("FileDecription", fileDecription) :
                new ObjectParameter("FileDecription", typeof(string));
    
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditMemberFiles_Result>("proc_AddEditMemberFiles", memberDocumentIdParameter, fileNameParameter, fileDecriptionParameter, documentTypeNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditmembers_Result> proc_AddEditmembers(Nullable<int> memberId, string payroll, string memberNo, string fullName, string searchName, string idNo, Nullable<bool> isPerson, string nHIFNo, string kRAPin, string nSSFNo, string hudumaNo, string email, Nullable<System.DateTime> dOB, Nullable<int> titleId, string gender, Nullable<int> maritalStatusId, string telephone1, string telephone2, string telephone3, string phoneNo, string faxNumber, string physicalLocation, string postalAddress, Nullable<int> memberStatusId, Nullable<bool> blocked, Nullable<int> levelofEducationId, Nullable<bool> isRegister, Nullable<bool> isDormancy, string remark, Nullable<int> securityQuestion, string registrationCode, Nullable<int> nationalityId, Nullable<System.DateTime> companyRegistrationDate, Nullable<System.DateTime> registrationDate, string companyCertificateNo, Nullable<int> bankId, Nullable<int> bankBranchId, string bankAccountNo, Nullable<int> currencyId, string securityAnswer, Nullable<int> hierarchyId, Nullable<decimal> gross, Nullable<decimal> nett, Nullable<decimal> totalShares, Nullable<decimal> freeShare, Nullable<bool> delete)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var payrollParameter = payroll != null ?
                new ObjectParameter("Payroll", payroll) :
                new ObjectParameter("Payroll", typeof(string));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var isPersonParameter = isPerson.HasValue ?
                new ObjectParameter("IsPerson", isPerson) :
                new ObjectParameter("IsPerson", typeof(bool));
    
            var nHIFNoParameter = nHIFNo != null ?
                new ObjectParameter("NHIFNo", nHIFNo) :
                new ObjectParameter("NHIFNo", typeof(string));
    
            var kRAPinParameter = kRAPin != null ?
                new ObjectParameter("KRAPin", kRAPin) :
                new ObjectParameter("KRAPin", typeof(string));
    
            var nSSFNoParameter = nSSFNo != null ?
                new ObjectParameter("NSSFNo", nSSFNo) :
                new ObjectParameter("NSSFNo", typeof(string));
    
            var hudumaNoParameter = hudumaNo != null ?
                new ObjectParameter("HudumaNo", hudumaNo) :
                new ObjectParameter("HudumaNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var physicalLocationParameter = physicalLocation != null ?
                new ObjectParameter("PhysicalLocation", physicalLocation) :
                new ObjectParameter("PhysicalLocation", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var memberStatusIdParameter = memberStatusId.HasValue ?
                new ObjectParameter("MemberStatusId", memberStatusId) :
                new ObjectParameter("MemberStatusId", typeof(int));
    
            var blockedParameter = blocked.HasValue ?
                new ObjectParameter("Blocked", blocked) :
                new ObjectParameter("Blocked", typeof(bool));
    
            var levelofEducationIdParameter = levelofEducationId.HasValue ?
                new ObjectParameter("LevelofEducationId", levelofEducationId) :
                new ObjectParameter("LevelofEducationId", typeof(int));
    
            var isRegisterParameter = isRegister.HasValue ?
                new ObjectParameter("IsRegister", isRegister) :
                new ObjectParameter("IsRegister", typeof(bool));
    
            var isDormancyParameter = isDormancy.HasValue ?
                new ObjectParameter("IsDormancy", isDormancy) :
                new ObjectParameter("IsDormancy", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var securityQuestionParameter = securityQuestion.HasValue ?
                new ObjectParameter("SecurityQuestion", securityQuestion) :
                new ObjectParameter("SecurityQuestion", typeof(int));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var companyRegistrationDateParameter = companyRegistrationDate.HasValue ?
                new ObjectParameter("CompanyRegistrationDate", companyRegistrationDate) :
                new ObjectParameter("CompanyRegistrationDate", typeof(System.DateTime));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var companyCertificateNoParameter = companyCertificateNo != null ?
                new ObjectParameter("CompanyCertificateNo", companyCertificateNo) :
                new ObjectParameter("CompanyCertificateNo", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var bankBranchIdParameter = bankBranchId.HasValue ?
                new ObjectParameter("BankBranchId", bankBranchId) :
                new ObjectParameter("BankBranchId", typeof(int));
    
            var bankAccountNoParameter = bankAccountNo != null ?
                new ObjectParameter("BankAccountNo", bankAccountNo) :
                new ObjectParameter("BankAccountNo", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var hierarchyIdParameter = hierarchyId.HasValue ?
                new ObjectParameter("HierarchyId", hierarchyId) :
                new ObjectParameter("HierarchyId", typeof(int));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var nettParameter = nett.HasValue ?
                new ObjectParameter("Nett", nett) :
                new ObjectParameter("Nett", typeof(decimal));
    
            var totalSharesParameter = totalShares.HasValue ?
                new ObjectParameter("TotalShares", totalShares) :
                new ObjectParameter("TotalShares", typeof(decimal));
    
            var freeShareParameter = freeShare.HasValue ?
                new ObjectParameter("FreeShare", freeShare) :
                new ObjectParameter("FreeShare", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditmembers_Result>("proc_AddEditmembers", memberIdParameter, payrollParameter, memberNoParameter, fullNameParameter, searchNameParameter, idNoParameter, isPersonParameter, nHIFNoParameter, kRAPinParameter, nSSFNoParameter, hudumaNoParameter, emailParameter, dOBParameter, titleIdParameter, genderParameter, maritalStatusIdParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, phoneNoParameter, faxNumberParameter, physicalLocationParameter, postalAddressParameter, memberStatusIdParameter, blockedParameter, levelofEducationIdParameter, isRegisterParameter, isDormancyParameter, remarkParameter, securityQuestionParameter, registrationCodeParameter, nationalityIdParameter, companyRegistrationDateParameter, registrationDateParameter, companyCertificateNoParameter, bankIdParameter, bankBranchIdParameter, bankAccountNoParameter, currencyIdParameter, securityAnswerParameter, hierarchyIdParameter, grossParameter, nettParameter, totalSharesParameter, freeShareParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditMembershares_Result> proc_AddEditMembershares(Nullable<int> memberShareId, Nullable<int> memberId, Nullable<int> productId, Nullable<decimal> contributionRate, Nullable<decimal> minBalance, Nullable<System.DateTime> transactionDate, Nullable<bool> hideBalance, Nullable<bool> exemptMobileCharges, Nullable<int> currencyId, string accountNumber, Nullable<bool> delete)
        {
            var memberShareIdParameter = memberShareId.HasValue ?
                new ObjectParameter("MemberShareId", memberShareId) :
                new ObjectParameter("MemberShareId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var contributionRateParameter = contributionRate.HasValue ?
                new ObjectParameter("ContributionRate", contributionRate) :
                new ObjectParameter("ContributionRate", typeof(decimal));
    
            var minBalanceParameter = minBalance.HasValue ?
                new ObjectParameter("MinBalance", minBalance) :
                new ObjectParameter("MinBalance", typeof(decimal));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var hideBalanceParameter = hideBalance.HasValue ?
                new ObjectParameter("HideBalance", hideBalance) :
                new ObjectParameter("HideBalance", typeof(bool));
    
            var exemptMobileChargesParameter = exemptMobileCharges.HasValue ?
                new ObjectParameter("ExemptMobileCharges", exemptMobileCharges) :
                new ObjectParameter("ExemptMobileCharges", typeof(bool));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditMembershares_Result>("proc_AddEditMembershares", memberShareIdParameter, memberIdParameter, productIdParameter, contributionRateParameter, minBalanceParameter, transactionDateParameter, hideBalanceParameter, exemptMobileChargesParameter, currencyIdParameter, accountNumberParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditMembersshares_Result> proc_AddEditMembersshares(Nullable<int> memberShareId, Nullable<int> memberId, Nullable<int> productId, Nullable<decimal> contributionRate, Nullable<decimal> minBalance, Nullable<System.DateTime> transactionDate, Nullable<bool> hideBalance, Nullable<bool> exemptMobileCharges, Nullable<int> currencyId, string accountNumber, Nullable<bool> delete)
        {
            var memberShareIdParameter = memberShareId.HasValue ?
                new ObjectParameter("MemberShareId", memberShareId) :
                new ObjectParameter("MemberShareId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var contributionRateParameter = contributionRate.HasValue ?
                new ObjectParameter("ContributionRate", contributionRate) :
                new ObjectParameter("ContributionRate", typeof(decimal));
    
            var minBalanceParameter = minBalance.HasValue ?
                new ObjectParameter("MinBalance", minBalance) :
                new ObjectParameter("MinBalance", typeof(decimal));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var hideBalanceParameter = hideBalance.HasValue ?
                new ObjectParameter("HideBalance", hideBalance) :
                new ObjectParameter("HideBalance", typeof(bool));
    
            var exemptMobileChargesParameter = exemptMobileCharges.HasValue ?
                new ObjectParameter("ExemptMobileCharges", exemptMobileCharges) :
                new ObjectParameter("ExemptMobileCharges", typeof(bool));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditMembersshares_Result>("proc_AddEditMembersshares", memberShareIdParameter, memberIdParameter, productIdParameter, contributionRateParameter, minBalanceParameter, transactionDateParameter, hideBalanceParameter, exemptMobileChargesParameter, currencyIdParameter, accountNumberParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditMemberStatus_Result> proc_AddEditMemberStatus(Nullable<int> memberStatusId, string memberStatusName, Nullable<bool> delete)
        {
            var memberStatusIdParameter = memberStatusId.HasValue ?
                new ObjectParameter("MemberStatusId", memberStatusId) :
                new ObjectParameter("MemberStatusId", typeof(int));
    
            var memberStatusNameParameter = memberStatusName != null ?
                new ObjectParameter("MemberStatusName", memberStatusName) :
                new ObjectParameter("MemberStatusName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditMemberStatus_Result>("proc_AddEditMemberStatus", memberStatusIdParameter, memberStatusNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditNationality_Result> proc_AddEditNationality(Nullable<int> nationalityId, string nationalityName, Nullable<bool> delete)
        {
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var nationalityNameParameter = nationalityName != null ?
                new ObjectParameter("NationalityName", nationalityName) :
                new ObjectParameter("NationalityName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditNationality_Result>("proc_AddEditNationality", nationalityIdParameter, nationalityNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditPaymentModes_Result> proc_AddEditPaymentModes(Nullable<int> paymentModeId, string name, string description, Nullable<bool> allowBackDated, Nullable<int> maxDaysOfBackDated, Nullable<bool> canDisburseLoan, Nullable<bool> isDefault, Nullable<bool> delete)
        {
            var paymentModeIdParameter = paymentModeId.HasValue ?
                new ObjectParameter("PaymentModeId", paymentModeId) :
                new ObjectParameter("PaymentModeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var allowBackDatedParameter = allowBackDated.HasValue ?
                new ObjectParameter("AllowBackDated", allowBackDated) :
                new ObjectParameter("AllowBackDated", typeof(bool));
    
            var maxDaysOfBackDatedParameter = maxDaysOfBackDated.HasValue ?
                new ObjectParameter("MaxDaysOfBackDated", maxDaysOfBackDated) :
                new ObjectParameter("MaxDaysOfBackDated", typeof(int));
    
            var canDisburseLoanParameter = canDisburseLoan.HasValue ?
                new ObjectParameter("CanDisburseLoan", canDisburseLoan) :
                new ObjectParameter("CanDisburseLoan", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditPaymentModes_Result>("proc_AddEditPaymentModes", paymentModeIdParameter, nameParameter, descriptionParameter, allowBackDatedParameter, maxDaysOfBackDatedParameter, canDisburseLoanParameter, isDefaultParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditPayModes_Result> proc_AddEditPayModes(Nullable<int> paymentModeId, string name, string description, Nullable<bool> allowBackDated, Nullable<int> maxDaysOfBackDated, Nullable<bool> canDisburseLoan, Nullable<bool> isDefault, Nullable<bool> delete)
        {
            var paymentModeIdParameter = paymentModeId.HasValue ?
                new ObjectParameter("PaymentModeId", paymentModeId) :
                new ObjectParameter("PaymentModeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var allowBackDatedParameter = allowBackDated.HasValue ?
                new ObjectParameter("AllowBackDated", allowBackDated) :
                new ObjectParameter("AllowBackDated", typeof(bool));
    
            var maxDaysOfBackDatedParameter = maxDaysOfBackDated.HasValue ?
                new ObjectParameter("MaxDaysOfBackDated", maxDaysOfBackDated) :
                new ObjectParameter("MaxDaysOfBackDated", typeof(int));
    
            var canDisburseLoanParameter = canDisburseLoan.HasValue ?
                new ObjectParameter("CanDisburseLoan", canDisburseLoan) :
                new ObjectParameter("CanDisburseLoan", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditPayModes_Result>("proc_AddEditPayModes", paymentModeIdParameter, nameParameter, descriptionParameter, allowBackDatedParameter, maxDaysOfBackDatedParameter, canDisburseLoanParameter, isDefaultParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditProduct_Result> proc_AddEditProduct(Nullable<int> productId, string code, string description, Nullable<decimal> minDeposit, Nullable<bool> maxAmount, Nullable<decimal> upperLimit, Nullable<bool> earnDividends, Nullable<decimal> dividendRate, Nullable<bool> withdrawn, Nullable<bool> fixedDeposit, Nullable<bool> transferred, Nullable<bool> guaranteeLoan, string frequency, Nullable<bool> earnInterest, Nullable<bool> chargeDefaulters, Nullable<bool> multAccounts, Nullable<bool> callDeposit, Nullable<decimal> minBalance, Nullable<bool> canBeOverdrawn, Nullable<bool> accrueInterestDaily, Nullable<bool> delete)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minDepositParameter = minDeposit.HasValue ?
                new ObjectParameter("MinDeposit", minDeposit) :
                new ObjectParameter("MinDeposit", typeof(decimal));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(bool));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var earnDividendsParameter = earnDividends.HasValue ?
                new ObjectParameter("EarnDividends", earnDividends) :
                new ObjectParameter("EarnDividends", typeof(bool));
    
            var dividendRateParameter = dividendRate.HasValue ?
                new ObjectParameter("DividendRate", dividendRate) :
                new ObjectParameter("DividendRate", typeof(decimal));
    
            var withdrawnParameter = withdrawn.HasValue ?
                new ObjectParameter("Withdrawn", withdrawn) :
                new ObjectParameter("Withdrawn", typeof(bool));
    
            var fixedDepositParameter = fixedDeposit.HasValue ?
                new ObjectParameter("FixedDeposit", fixedDeposit) :
                new ObjectParameter("FixedDeposit", typeof(bool));
    
            var transferredParameter = transferred.HasValue ?
                new ObjectParameter("Transferred", transferred) :
                new ObjectParameter("Transferred", typeof(bool));
    
            var guaranteeLoanParameter = guaranteeLoan.HasValue ?
                new ObjectParameter("GuaranteeLoan", guaranteeLoan) :
                new ObjectParameter("GuaranteeLoan", typeof(bool));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var earnInterestParameter = earnInterest.HasValue ?
                new ObjectParameter("EarnInterest", earnInterest) :
                new ObjectParameter("EarnInterest", typeof(bool));
    
            var chargeDefaultersParameter = chargeDefaulters.HasValue ?
                new ObjectParameter("ChargeDefaulters", chargeDefaulters) :
                new ObjectParameter("ChargeDefaulters", typeof(bool));
    
            var multAccountsParameter = multAccounts.HasValue ?
                new ObjectParameter("MultAccounts", multAccounts) :
                new ObjectParameter("MultAccounts", typeof(bool));
    
            var callDepositParameter = callDeposit.HasValue ?
                new ObjectParameter("CallDeposit", callDeposit) :
                new ObjectParameter("CallDeposit", typeof(bool));
    
            var minBalanceParameter = minBalance.HasValue ?
                new ObjectParameter("MinBalance", minBalance) :
                new ObjectParameter("MinBalance", typeof(decimal));
    
            var canBeOverdrawnParameter = canBeOverdrawn.HasValue ?
                new ObjectParameter("CanBeOverdrawn", canBeOverdrawn) :
                new ObjectParameter("CanBeOverdrawn", typeof(bool));
    
            var accrueInterestDailyParameter = accrueInterestDaily.HasValue ?
                new ObjectParameter("AccrueInterestDaily", accrueInterestDaily) :
                new ObjectParameter("AccrueInterestDaily", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditProduct_Result>("proc_AddEditProduct", productIdParameter, codeParameter, descriptionParameter, minDepositParameter, maxAmountParameter, upperLimitParameter, earnDividendsParameter, dividendRateParameter, withdrawnParameter, fixedDepositParameter, transferredParameter, guaranteeLoanParameter, frequencyParameter, earnInterestParameter, chargeDefaultersParameter, multAccountsParameter, callDepositParameter, minBalanceParameter, canBeOverdrawnParameter, accrueInterestDailyParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditProductCharge_Result> proc_AddEditProductCharge(Nullable<int> productChargeId, Nullable<int> productId, Nullable<int> chargeId, Nullable<int> chargeType, Nullable<bool> delete)
        {
            var productChargeIdParameter = productChargeId.HasValue ?
                new ObjectParameter("ProductChargeId", productChargeId) :
                new ObjectParameter("ProductChargeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var chargeIdParameter = chargeId.HasValue ?
                new ObjectParameter("ChargeId", chargeId) :
                new ObjectParameter("ChargeId", typeof(int));
    
            var chargeTypeParameter = chargeType.HasValue ?
                new ObjectParameter("ChargeType", chargeType) :
                new ObjectParameter("ChargeType", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditProductCharge_Result>("proc_AddEditProductCharge", productChargeIdParameter, productIdParameter, chargeIdParameter, chargeTypeParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditProducts_Result> proc_AddEditProducts(Nullable<int> productId, string code, string description, Nullable<decimal> minDeposit, Nullable<bool> maxAmount, Nullable<decimal> upperLimit, Nullable<bool> earnDividends, Nullable<decimal> dividendRate, Nullable<bool> withdrawn, Nullable<bool> fixedDeposit, Nullable<bool> transferred, Nullable<bool> guaranteeLoan, string frequency, Nullable<bool> earnInterest, Nullable<bool> chargeDefaulters, Nullable<bool> multAccounts, Nullable<bool> callDeposit, Nullable<decimal> minBalance, Nullable<bool> canBeOverdrawn, Nullable<bool> accrueInterestDaily, Nullable<bool> delete)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minDepositParameter = minDeposit.HasValue ?
                new ObjectParameter("MinDeposit", minDeposit) :
                new ObjectParameter("MinDeposit", typeof(decimal));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(bool));
    
            var upperLimitParameter = upperLimit.HasValue ?
                new ObjectParameter("UpperLimit", upperLimit) :
                new ObjectParameter("UpperLimit", typeof(decimal));
    
            var earnDividendsParameter = earnDividends.HasValue ?
                new ObjectParameter("EarnDividends", earnDividends) :
                new ObjectParameter("EarnDividends", typeof(bool));
    
            var dividendRateParameter = dividendRate.HasValue ?
                new ObjectParameter("DividendRate", dividendRate) :
                new ObjectParameter("DividendRate", typeof(decimal));
    
            var withdrawnParameter = withdrawn.HasValue ?
                new ObjectParameter("Withdrawn", withdrawn) :
                new ObjectParameter("Withdrawn", typeof(bool));
    
            var fixedDepositParameter = fixedDeposit.HasValue ?
                new ObjectParameter("FixedDeposit", fixedDeposit) :
                new ObjectParameter("FixedDeposit", typeof(bool));
    
            var transferredParameter = transferred.HasValue ?
                new ObjectParameter("Transferred", transferred) :
                new ObjectParameter("Transferred", typeof(bool));
    
            var guaranteeLoanParameter = guaranteeLoan.HasValue ?
                new ObjectParameter("GuaranteeLoan", guaranteeLoan) :
                new ObjectParameter("GuaranteeLoan", typeof(bool));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var earnInterestParameter = earnInterest.HasValue ?
                new ObjectParameter("EarnInterest", earnInterest) :
                new ObjectParameter("EarnInterest", typeof(bool));
    
            var chargeDefaultersParameter = chargeDefaulters.HasValue ?
                new ObjectParameter("ChargeDefaulters", chargeDefaulters) :
                new ObjectParameter("ChargeDefaulters", typeof(bool));
    
            var multAccountsParameter = multAccounts.HasValue ?
                new ObjectParameter("MultAccounts", multAccounts) :
                new ObjectParameter("MultAccounts", typeof(bool));
    
            var callDepositParameter = callDeposit.HasValue ?
                new ObjectParameter("CallDeposit", callDeposit) :
                new ObjectParameter("CallDeposit", typeof(bool));
    
            var minBalanceParameter = minBalance.HasValue ?
                new ObjectParameter("MinBalance", minBalance) :
                new ObjectParameter("MinBalance", typeof(decimal));
    
            var canBeOverdrawnParameter = canBeOverdrawn.HasValue ?
                new ObjectParameter("CanBeOverdrawn", canBeOverdrawn) :
                new ObjectParameter("CanBeOverdrawn", typeof(bool));
    
            var accrueInterestDailyParameter = accrueInterestDaily.HasValue ?
                new ObjectParameter("AccrueInterestDaily", accrueInterestDaily) :
                new ObjectParameter("AccrueInterestDaily", typeof(bool));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditProducts_Result>("proc_AddEditProducts", productIdParameter, codeParameter, descriptionParameter, minDepositParameter, maxAmountParameter, upperLimitParameter, earnDividendsParameter, dividendRateParameter, withdrawnParameter, fixedDepositParameter, transferredParameter, guaranteeLoanParameter, frequencyParameter, earnInterestParameter, chargeDefaultersParameter, multAccountsParameter, callDepositParameter, minBalanceParameter, canBeOverdrawnParameter, accrueInterestDailyParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditRelations_Result> proc_AddEditRelations(Nullable<int> relationId, string relationName, Nullable<bool> delete)
        {
            var relationIdParameter = relationId.HasValue ?
                new ObjectParameter("RelationId", relationId) :
                new ObjectParameter("RelationId", typeof(int));
    
            var relationNameParameter = relationName != null ?
                new ObjectParameter("RelationName", relationName) :
                new ObjectParameter("RelationName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditRelations_Result>("proc_AddEditRelations", relationIdParameter, relationNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditSecurityQuestions_Result> proc_AddEditSecurityQuestions(Nullable<int> securityQuestionId, string securityQuestionName, Nullable<bool> delete)
        {
            var securityQuestionIdParameter = securityQuestionId.HasValue ?
                new ObjectParameter("SecurityQuestionId", securityQuestionId) :
                new ObjectParameter("SecurityQuestionId", typeof(int));
    
            var securityQuestionNameParameter = securityQuestionName != null ?
                new ObjectParameter("SecurityQuestionName", securityQuestionName) :
                new ObjectParameter("SecurityQuestionName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditSecurityQuestions_Result>("proc_AddEditSecurityQuestions", securityQuestionIdParameter, securityQuestionNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditsLoans_Result> proc_AddEditsLoans(Nullable<int> loanId, Nullable<int> loanTypeId, Nullable<int> memberId, string code, string manualRef, Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<System.DateTime> applicationDate, Nullable<int> periodFrequency, Nullable<int> repayPeriod, Nullable<bool> isMarkUpBased, Nullable<decimal> markupAmount, Nullable<int> interest, Nullable<int> status, Nullable<System.DateTime> statusDate, Nullable<int> purposeId, Nullable<decimal> grossPay, Nullable<decimal> netPay, string loanSeries, Nullable<decimal> totalShares, Nullable<decimal> freeShares, Nullable<bool> isMigrated, Nullable<int> creditOfficerId, Nullable<int> donorId, Nullable<int> currencyId, Nullable<int> branchId, Nullable<bool> delete)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var manualRefParameter = manualRef != null ?
                new ObjectParameter("ManualRef", manualRef) :
                new ObjectParameter("ManualRef", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var periodFrequencyParameter = periodFrequency.HasValue ?
                new ObjectParameter("PeriodFrequency", periodFrequency) :
                new ObjectParameter("PeriodFrequency", typeof(int));
    
            var repayPeriodParameter = repayPeriod.HasValue ?
                new ObjectParameter("RepayPeriod", repayPeriod) :
                new ObjectParameter("RepayPeriod", typeof(int));
    
            var isMarkUpBasedParameter = isMarkUpBased.HasValue ?
                new ObjectParameter("IsMarkUpBased", isMarkUpBased) :
                new ObjectParameter("IsMarkUpBased", typeof(bool));
    
            var markupAmountParameter = markupAmount.HasValue ?
                new ObjectParameter("MarkupAmount", markupAmount) :
                new ObjectParameter("MarkupAmount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var purposeIdParameter = purposeId.HasValue ?
                new ObjectParameter("PurposeId", purposeId) :
                new ObjectParameter("PurposeId", typeof(int));
    
            var grossPayParameter = grossPay.HasValue ?
                new ObjectParameter("GrossPay", grossPay) :
                new ObjectParameter("GrossPay", typeof(decimal));
    
            var netPayParameter = netPay.HasValue ?
                new ObjectParameter("NetPay", netPay) :
                new ObjectParameter("NetPay", typeof(decimal));
    
            var loanSeriesParameter = loanSeries != null ?
                new ObjectParameter("LoanSeries", loanSeries) :
                new ObjectParameter("LoanSeries", typeof(string));
    
            var totalSharesParameter = totalShares.HasValue ?
                new ObjectParameter("TotalShares", totalShares) :
                new ObjectParameter("TotalShares", typeof(decimal));
    
            var freeSharesParameter = freeShares.HasValue ?
                new ObjectParameter("FreeShares", freeShares) :
                new ObjectParameter("FreeShares", typeof(decimal));
    
            var isMigratedParameter = isMigrated.HasValue ?
                new ObjectParameter("IsMigrated", isMigrated) :
                new ObjectParameter("IsMigrated", typeof(bool));
    
            var creditOfficerIdParameter = creditOfficerId.HasValue ?
                new ObjectParameter("CreditOfficerId", creditOfficerId) :
                new ObjectParameter("CreditOfficerId", typeof(int));
    
            var donorIdParameter = donorId.HasValue ?
                new ObjectParameter("DonorId", donorId) :
                new ObjectParameter("DonorId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditsLoans_Result>("proc_AddEditsLoans", loanIdParameter, loanTypeIdParameter, memberIdParameter, codeParameter, manualRefParameter, loanAmountParameter, interestRateParameter, applicationDateParameter, periodFrequencyParameter, repayPeriodParameter, isMarkUpBasedParameter, markupAmountParameter, interestParameter, statusParameter, statusDateParameter, purposeIdParameter, grossPayParameter, netPayParameter, loanSeriesParameter, totalSharesParameter, freeSharesParameter, isMigratedParameter, creditOfficerIdParameter, donorIdParameter, currencyIdParameter, branchIdParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditStructure_Result> proc_AddEditStructure(Nullable<int> structureId, string caption, string description, Nullable<int> parentId, string remarks, Nullable<bool> delete)
        {
            var structureIdParameter = structureId.HasValue ?
                new ObjectParameter("StructureId", structureId) :
                new ObjectParameter("StructureId", typeof(int));
    
            var captionParameter = caption != null ?
                new ObjectParameter("Caption", caption) :
                new ObjectParameter("Caption", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditStructure_Result>("proc_AddEditStructure", structureIdParameter, captionParameter, descriptionParameter, parentIdParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditStructureGroupDetails_Result> proc_AddEditStructureGroupDetails(Nullable<int> structureGroupId, Nullable<int> structureValueId, string code, string fullName, string telephone1, string telephone2, string phoneNumber, string faxNumber, string email, string address, string retirement, string postalAddress, Nullable<int> noofWeek, string everyDayofWeek, Nullable<int> dateOfMonth, Nullable<int> maximumMembership, Nullable<decimal> serviceCharge, Nullable<int> creditOfficerID, Nullable<bool> limitSavings, Nullable<decimal> groupLoanLimit, Nullable<decimal> individualLoanLimit, string groupPrefix, Nullable<bool> blocked, Nullable<System.DateTime> dateBlocked, string remarks, string location, Nullable<bool> delete)
        {
            var structureGroupIdParameter = structureGroupId.HasValue ?
                new ObjectParameter("StructureGroupId", structureGroupId) :
                new ObjectParameter("StructureGroupId", typeof(int));
    
            var structureValueIdParameter = structureValueId.HasValue ?
                new ObjectParameter("StructureValueId", structureValueId) :
                new ObjectParameter("StructureValueId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var retirementParameter = retirement != null ?
                new ObjectParameter("Retirement", retirement) :
                new ObjectParameter("Retirement", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var noofWeekParameter = noofWeek.HasValue ?
                new ObjectParameter("NoofWeek", noofWeek) :
                new ObjectParameter("NoofWeek", typeof(int));
    
            var everyDayofWeekParameter = everyDayofWeek != null ?
                new ObjectParameter("EveryDayofWeek", everyDayofWeek) :
                new ObjectParameter("EveryDayofWeek", typeof(string));
    
            var dateOfMonthParameter = dateOfMonth.HasValue ?
                new ObjectParameter("DateOfMonth", dateOfMonth) :
                new ObjectParameter("DateOfMonth", typeof(int));
    
            var maximumMembershipParameter = maximumMembership.HasValue ?
                new ObjectParameter("MaximumMembership", maximumMembership) :
                new ObjectParameter("MaximumMembership", typeof(int));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var creditOfficerIDParameter = creditOfficerID.HasValue ?
                new ObjectParameter("CreditOfficerID", creditOfficerID) :
                new ObjectParameter("CreditOfficerID", typeof(int));
    
            var limitSavingsParameter = limitSavings.HasValue ?
                new ObjectParameter("LimitSavings", limitSavings) :
                new ObjectParameter("LimitSavings", typeof(bool));
    
            var groupLoanLimitParameter = groupLoanLimit.HasValue ?
                new ObjectParameter("GroupLoanLimit", groupLoanLimit) :
                new ObjectParameter("GroupLoanLimit", typeof(decimal));
    
            var individualLoanLimitParameter = individualLoanLimit.HasValue ?
                new ObjectParameter("IndividualLoanLimit", individualLoanLimit) :
                new ObjectParameter("IndividualLoanLimit", typeof(decimal));
    
            var groupPrefixParameter = groupPrefix != null ?
                new ObjectParameter("GroupPrefix", groupPrefix) :
                new ObjectParameter("GroupPrefix", typeof(string));
    
            var blockedParameter = blocked.HasValue ?
                new ObjectParameter("Blocked", blocked) :
                new ObjectParameter("Blocked", typeof(bool));
    
            var dateBlockedParameter = dateBlocked.HasValue ?
                new ObjectParameter("DateBlocked", dateBlocked) :
                new ObjectParameter("DateBlocked", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditStructureGroupDetails_Result>("proc_AddEditStructureGroupDetails", structureGroupIdParameter, structureValueIdParameter, codeParameter, fullNameParameter, telephone1Parameter, telephone2Parameter, phoneNumberParameter, faxNumberParameter, emailParameter, addressParameter, retirementParameter, postalAddressParameter, noofWeekParameter, everyDayofWeekParameter, dateOfMonthParameter, maximumMembershipParameter, serviceChargeParameter, creditOfficerIDParameter, limitSavingsParameter, groupLoanLimitParameter, individualLoanLimitParameter, groupPrefixParameter, blockedParameter, dateBlockedParameter, remarksParameter, locationParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditStructureValues_Result> proc_AddEditStructureValues(Nullable<int> structureValueId, Nullable<int> structureId, string name, Nullable<int> parentId, Nullable<bool> isGroup, string remarks, Nullable<bool> delete)
        {
            var structureValueIdParameter = structureValueId.HasValue ?
                new ObjectParameter("StructureValueId", structureValueId) :
                new ObjectParameter("StructureValueId", typeof(int));
    
            var structureIdParameter = structureId.HasValue ?
                new ObjectParameter("StructureId", structureId) :
                new ObjectParameter("StructureId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditStructureValues_Result>("proc_AddEditStructureValues", structureValueIdParameter, structureIdParameter, nameParameter, parentIdParameter, isGroupParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditTariff_Result> proc_AddEditTariff(Nullable<int> tariffId, Nullable<int> chargesId, Nullable<decimal> start, Nullable<decimal> stop, Nullable<decimal> chargeAmount, Nullable<bool> delete)
        {
            var tariffIdParameter = tariffId.HasValue ?
                new ObjectParameter("TariffId", tariffId) :
                new ObjectParameter("TariffId", typeof(int));
    
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(decimal));
    
            var stopParameter = stop.HasValue ?
                new ObjectParameter("Stop", stop) :
                new ObjectParameter("Stop", typeof(decimal));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditTariff_Result>("proc_AddEditTariff", tariffIdParameter, chargesIdParameter, startParameter, stopParameter, chargeAmountParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditTitle_Result> proc_AddEditTitle(Nullable<int> titleId, string titleName, Nullable<bool> delete)
        {
            var titleIdParameter = titleId.HasValue ?
                new ObjectParameter("TitleId", titleId) :
                new ObjectParameter("TitleId", typeof(int));
    
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditTitle_Result>("proc_AddEditTitle", titleIdParameter, titleNameParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditTransactionCharges_Result> proc_AddEditTransactionCharges(Nullable<int> transactionChargesId, Nullable<int> accountTransactionId, Nullable<int> chargesId, Nullable<bool> isPercent, Nullable<decimal> amount, Nullable<decimal> total, Nullable<bool> delete)
        {
            var transactionChargesIdParameter = transactionChargesId.HasValue ?
                new ObjectParameter("TransactionChargesId", transactionChargesId) :
                new ObjectParameter("TransactionChargesId", typeof(int));
    
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            var isPercentParameter = isPercent.HasValue ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(bool));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditTransactionCharges_Result>("proc_AddEditTransactionCharges", transactionChargesIdParameter, accountTransactionIdParameter, chargesIdParameter, isPercentParameter, amountParameter, totalParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_AddEditWebContants_Result> proc_AddEditWebContants(Nullable<int> contantId, string fullName, string phoneNumber, string email, string subject, string message)
        {
            var contantIdParameter = contantId.HasValue ?
                new ObjectParameter("ContantId", contantId) :
                new ObjectParameter("ContantId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditWebContants_Result>("proc_AddEditWebContants", contantIdParameter, fullNameParameter, phoneNumberParameter, emailParameter, subjectParameter, messageParameter);
        }
    
        public virtual ObjectResult<proc_AddEditWebContantsUs_Result> proc_AddEditWebContantsUs(Nullable<int> contantId, string fullName, string phoneNumber, string email, string subject, string message)
        {
            var contantIdParameter = contantId.HasValue ?
                new ObjectParameter("ContantId", contantId) :
                new ObjectParameter("ContantId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditWebContantsUs_Result>("proc_AddEditWebContantsUs", contantIdParameter, fullNameParameter, phoneNumberParameter, emailParameter, subjectParameter, messageParameter);
        }
    
        public virtual ObjectResult<proc_AddhomeContants_Result> proc_AddhomeContants(Nullable<int> contactId, string fullName, string phoneNo, string email, string subject, string message)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddhomeContants_Result>("proc_AddhomeContants", contactIdParameter, fullNameParameter, phoneNoParameter, emailParameter, subjectParameter, messageParameter);
        }
    
        public virtual ObjectResult<proc_AddTransactions_Result> proc_AddTransactions(Nullable<int> accountTransactionId, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, string memberNo, string documentNo, Nullable<int> productId, string modeOfPayment, string transType, Nullable<int> baseCurrencyId, Nullable<int> currencyId, string currencySymbol, Nullable<decimal> exchangeRate, Nullable<bool> commission, string paidBy, Nullable<decimal> localCurrencyAmount, Nullable<decimal> amount, Nullable<decimal> amountCharge, Nullable<decimal> balanceAmount, string remarks, string chargesId, string tariffId, string isPercent, string total)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var currencySymbolParameter = currencySymbol != null ?
                new ObjectParameter("CurrencySymbol", currencySymbol) :
                new ObjectParameter("CurrencySymbol", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(bool));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var localCurrencyAmountParameter = localCurrencyAmount.HasValue ?
                new ObjectParameter("LocalCurrencyAmount", localCurrencyAmount) :
                new ObjectParameter("LocalCurrencyAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var amountChargeParameter = amountCharge.HasValue ?
                new ObjectParameter("AmountCharge", amountCharge) :
                new ObjectParameter("AmountCharge", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var chargesIdParameter = chargesId != null ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(string));
    
            var tariffIdParameter = tariffId != null ?
                new ObjectParameter("TariffId", tariffId) :
                new ObjectParameter("TariffId", typeof(string));
    
            var isPercentParameter = isPercent != null ?
                new ObjectParameter("IsPercent", isPercent) :
                new ObjectParameter("IsPercent", typeof(string));
    
            var totalParameter = total != null ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddTransactions_Result>("proc_AddTransactions", accountTransactionIdParameter, transactionDateParameter, valueDateParameter, memberNoParameter, documentNoParameter, productIdParameter, modeOfPaymentParameter, transTypeParameter, baseCurrencyIdParameter, currencyIdParameter, currencySymbolParameter, exchangeRateParameter, commissionParameter, paidByParameter, localCurrencyAmountParameter, amountParameter, amountChargeParameter, balanceAmountParameter, remarksParameter, chargesIdParameter, tariffIdParameter, isPercentParameter, totalParameter);
        }
    
        public virtual ObjectResult<proc_AddUpdateDeleteLocations_Result> proc_AddUpdateDeleteLocations(Nullable<int> locationId, string locationAddress, string locationLat, string locationLong, Nullable<bool> delete)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var locationAddressParameter = locationAddress != null ?
                new ObjectParameter("LocationAddress", locationAddress) :
                new ObjectParameter("LocationAddress", typeof(string));
    
            var locationLatParameter = locationLat != null ?
                new ObjectParameter("LocationLat", locationLat) :
                new ObjectParameter("LocationLat", typeof(string));
    
            var locationLongParameter = locationLong != null ?
                new ObjectParameter("LocationLong", locationLong) :
                new ObjectParameter("LocationLong", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddUpdateDeleteLocations_Result>("proc_AddUpdateDeleteLocations", locationIdParameter, locationAddressParameter, locationLatParameter, locationLongParameter, deleteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_CountLoanRows(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_CountLoanRows", memberIdParameter);
        }
    
        public virtual int proc_DeleteLoanAllCharges(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DeleteLoanAllCharges", loanIdParameter);
        }
    
        public virtual int proc_DeleteLoanApplicationDetails(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DeleteLoanApplicationDetails", loanIdParameter);
        }
    
        public virtual int proc_DeleteLoanCharges(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DeleteLoanCharges", loanIdParameter);
        }
    
        public virtual ObjectResult<string> proc_GenerateLoanCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GenerateLoanCode");
        }
    
        public virtual int proc_generateMemberNo(Nullable<int> memberId, string memberNo, Nullable<int> autoPrefixId, string prefixeName, string prefixeText, Nullable<bool> isDateRelate, Nullable<bool> today, Nullable<bool> month, Nullable<bool> year, Nullable<bool> branch, string useBranchPrefixe, string useGroup, Nullable<int> prefixeId, Nullable<int> autoGenNumberId, string autoGenNumberText, Nullable<bool> usePrefix, Nullable<int> start, Nullable<int> stop, Nullable<int> startFrom, Nullable<bool> allowManual, string member, Nullable<int> n)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var memberNoParameter = memberNo != null ?
                new ObjectParameter("MemberNo", memberNo) :
                new ObjectParameter("MemberNo", typeof(string));
    
            var autoPrefixIdParameter = autoPrefixId.HasValue ?
                new ObjectParameter("AutoPrefixId", autoPrefixId) :
                new ObjectParameter("AutoPrefixId", typeof(int));
    
            var prefixeNameParameter = prefixeName != null ?
                new ObjectParameter("PrefixeName", prefixeName) :
                new ObjectParameter("PrefixeName", typeof(string));
    
            var prefixeTextParameter = prefixeText != null ?
                new ObjectParameter("PrefixeText", prefixeText) :
                new ObjectParameter("PrefixeText", typeof(string));
    
            var isDateRelateParameter = isDateRelate.HasValue ?
                new ObjectParameter("isDateRelate", isDateRelate) :
                new ObjectParameter("isDateRelate", typeof(bool));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(bool));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(bool));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(bool));
    
            var branchParameter = branch.HasValue ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(bool));
    
            var useBranchPrefixeParameter = useBranchPrefixe != null ?
                new ObjectParameter("UseBranchPrefixe", useBranchPrefixe) :
                new ObjectParameter("UseBranchPrefixe", typeof(string));
    
            var useGroupParameter = useGroup != null ?
                new ObjectParameter("UseGroup", useGroup) :
                new ObjectParameter("UseGroup", typeof(string));
    
            var prefixeIdParameter = prefixeId.HasValue ?
                new ObjectParameter("PrefixeId", prefixeId) :
                new ObjectParameter("PrefixeId", typeof(int));
    
            var autoGenNumberIdParameter = autoGenNumberId.HasValue ?
                new ObjectParameter("AutoGenNumberId", autoGenNumberId) :
                new ObjectParameter("AutoGenNumberId", typeof(int));
    
            var autoGenNumberTextParameter = autoGenNumberText != null ?
                new ObjectParameter("AutoGenNumberText", autoGenNumberText) :
                new ObjectParameter("AutoGenNumberText", typeof(string));
    
            var usePrefixParameter = usePrefix.HasValue ?
                new ObjectParameter("UsePrefix", usePrefix) :
                new ObjectParameter("UsePrefix", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var stopParameter = stop.HasValue ?
                new ObjectParameter("Stop", stop) :
                new ObjectParameter("Stop", typeof(int));
    
            var startFromParameter = startFrom.HasValue ?
                new ObjectParameter("StartFrom", startFrom) :
                new ObjectParameter("StartFrom", typeof(int));
    
            var allowManualParameter = allowManual.HasValue ?
                new ObjectParameter("AllowManual", allowManual) :
                new ObjectParameter("AllowManual", typeof(bool));
    
            var memberParameter = member != null ?
                new ObjectParameter("Member", member) :
                new ObjectParameter("Member", typeof(string));
    
            var nParameter = n.HasValue ?
                new ObjectParameter("n", n) :
                new ObjectParameter("n", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_generateMemberNo", memberIdParameter, memberNoParameter, autoPrefixIdParameter, prefixeNameParameter, prefixeTextParameter, isDateRelateParameter, todayParameter, monthParameter, yearParameter, branchParameter, useBranchPrefixeParameter, useGroupParameter, prefixeIdParameter, autoGenNumberIdParameter, autoGenNumberTextParameter, usePrefixParameter, startParameter, stopParameter, startFromParameter, allowManualParameter, memberParameter, nParameter);
        }
    
        public virtual ObjectResult<string> proc_GenerateMemberNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GenerateMemberNumber");
        }
    
        public virtual ObjectResult<string> proc_GetAccNumberByProductId(Nullable<int> productId, Nullable<int> memberId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GetAccNumberByProductId", productIdParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAccountsTransactionsAll_Result> proc_GetAccountsTransactionsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAccountsTransactionsAll_Result>("proc_GetAccountsTransactionsAll");
        }
    
        public virtual ObjectResult<proc_GetAccountTransactionByMemberId_Result> proc_GetAccountTransactionByMemberId(Nullable<int> memberId, Nullable<int> productId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAccountTransactionByMemberId_Result>("proc_GetAccountTransactionByMemberId", memberIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAccountTransactionByMemberIdProductId_Result> proc_GetAccountTransactionByMemberIdProductId(Nullable<int> memberId, Nullable<int> productId, string accountNumber)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAccountTransactionByMemberIdProductId_Result>("proc_GetAccountTransactionByMemberIdProductId", memberIdParameter, productIdParameter, accountNumberParameter);
        }
    
        public virtual ObjectResult<proc_GetAccountTransactionsAll_Result> proc_GetAccountTransactionsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAccountTransactionsAll_Result>("proc_GetAccountTransactionsAll");
        }
    
        public virtual ObjectResult<proc_GetAccTransactionByMemberIdProductId_Result> proc_GetAccTransactionByMemberIdProductId(Nullable<int> memberId, Nullable<int> productId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAccTransactionByMemberIdProductId_Result>("proc_GetAccTransactionByMemberIdProductId", memberIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllApplicationLoans_Result> proc_GetAllApplicationLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllApplicationLoans_Result>("proc_GetAllApplicationLoans");
        }
    
        public virtual int proc_GetAllApplicationsChargesLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetAllApplicationsChargesLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllApplyLoans_Result> proc_GetAllApplyLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllApplyLoans_Result>("proc_GetAllApplyLoans");
        }
    
        public virtual ObjectResult<proc_GetAllAutoGenNumbers_Result> proc_GetAllAutoGenNumbers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAutoGenNumbers_Result>("proc_GetAllAutoGenNumbers");
        }
    
        public virtual ObjectResult<proc_GetAllAutoGenPrefixes_Result> proc_GetAllAutoGenPrefixes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAutoGenPrefixes_Result>("proc_GetAllAutoGenPrefixes");
        }
    
        public virtual ObjectResult<Proc_GetAllBackBranch_Result> Proc_GetAllBackBranch(Nullable<int> bankId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllBackBranch_Result>("Proc_GetAllBackBranch", bankIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_getAllBalanceAmount(Nullable<int> productId, Nullable<int> memberId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_getAllBalanceAmount", productIdParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllBankBranches_Result> proc_GetAllBankBranches()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllBankBranches_Result>("proc_GetAllBankBranches");
        }
    
        public virtual ObjectResult<proc_GetAllBanks_Result> proc_GetAllBanks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllBanks_Result>("proc_GetAllBanks");
        }
    
        public virtual ObjectResult<proc_GetAllBeneficiaries_Result> proc_GetAllBeneficiaries(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllBeneficiaries_Result>("proc_GetAllBeneficiaries", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllChargesFinal_Result> proc_GetAllChargesFinal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllChargesFinal_Result>("proc_GetAllChargesFinal");
        }
    
        public virtual ObjectResult<proc_GetAllClientTypes_Result> proc_GetAllClientTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllClientTypes_Result>("proc_GetAllClientTypes");
        }
    
        public virtual ObjectResult<proc_GetALLCollateral_Result> proc_GetALLCollateral()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLCollateral_Result>("proc_GetALLCollateral");
        }
    
        public virtual ObjectResult<proc_GetALLCollaterals_Result> proc_GetALLCollaterals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLCollaterals_Result>("proc_GetALLCollaterals");
        }
    
        public virtual ObjectResult<proc_GetAllCompanyBranches_Result> proc_GetAllCompanyBranches()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCompanyBranches_Result>("proc_GetAllCompanyBranches");
        }
    
        public virtual ObjectResult<proc_GetAllContacts_Result> proc_GetAllContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllContacts_Result>("proc_GetAllContacts");
        }
    
        public virtual ObjectResult<proc_GetAllCreditOfficers_Result> proc_GetAllCreditOfficers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCreditOfficers_Result>("proc_GetAllCreditOfficers");
        }
    
        public virtual ObjectResult<proc_GetAllCurrency_Result> proc_GetAllCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCurrency_Result>("proc_GetAllCurrency");
        }
    
        public virtual ObjectResult<proc_getAllCurrencyandExchangerate_Result> proc_getAllCurrencyandExchangerate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getAllCurrencyandExchangerate_Result>("proc_getAllCurrencyandExchangerate");
        }
    
        public virtual ObjectResult<proc_GetAllDocumentTypes_Result> proc_GetAllDocumentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllDocumentTypes_Result>("proc_GetAllDocumentTypes");
        }
    
        public virtual ObjectResult<proc_GetAllExchangeRates_Result> proc_GetAllExchangeRates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllExchangeRates_Result>("proc_GetAllExchangeRates");
        }
    
        public virtual ObjectResult<proc_GetAllFiles_Result> proc_GetAllFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllFiles_Result>("proc_GetAllFiles");
        }
    
        public virtual ObjectResult<proc_GetAllGender_Result> proc_GetAllGender()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllGender_Result>("proc_GetAllGender");
        }
    
        public virtual ObjectResult<proc_GetAllGenders_Result> proc_GetAllGenders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllGenders_Result>("proc_GetAllGenders");
        }
    
        public virtual ObjectResult<proc_GetAllKins_Result> proc_GetAllKins(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllKins_Result>("proc_GetAllKins", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLevelofEducations_Result> proc_GetAllLevelofEducations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLevelofEducations_Result>("proc_GetAllLevelofEducations");
        }
    
        public virtual ObjectResult<proc_GetAllLoan_Result> proc_GetAllLoan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoan_Result>("proc_GetAllLoan");
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_getAllLoanApplicationCharges(Nullable<int> loanTypeId)
        {
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_getAllLoanApplicationCharges", loanTypeIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanChargeListTariff_Result> proc_GetAllLoanChargeListTariff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanChargeListTariff_Result>("proc_GetAllLoanChargeListTariff");
        }
    
        public virtual ObjectResult<proc_GetAllLoanChargeListTariffByLoanChargesListId_Result> proc_GetAllLoanChargeListTariffByLoanChargesListId(Nullable<int> loanChargesListId)
        {
            var loanChargesListIdParameter = loanChargesListId.HasValue ?
                new ObjectParameter("LoanChargesListId", loanChargesListId) :
                new ObjectParameter("LoanChargesListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanChargeListTariffByLoanChargesListId_Result>("proc_GetAllLoanChargeListTariffByLoanChargesListId", loanChargesListIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanChargesbyLoanId_Result> proc_GetAllLoanChargesbyLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanChargesbyLoanId_Result>("proc_GetAllLoanChargesbyLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanChargesList_Result> proc_GetAllLoanChargesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanChargesList_Result>("proc_GetAllLoanChargesList");
        }
    
        public virtual ObjectResult<proc_GetAllLoanChargesLoanId_Result> proc_GetAllLoanChargesLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanChargesLoanId_Result>("proc_GetAllLoanChargesLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanCollateral_Result> proc_GetAllLoanCollateral(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanCollateral_Result>("proc_GetAllLoanCollateral", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanCollaterals_Result> proc_GetAllLoanCollaterals(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanCollaterals_Result>("proc_GetAllLoanCollaterals", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanDonors_Result> proc_GetAllLoanDonors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanDonors_Result>("proc_GetAllLoanDonors");
        }
    
        public virtual ObjectResult<proc_GetAllLoanGuarators_Result> proc_GetAllLoanGuarators(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanGuarators_Result>("proc_GetAllLoanGuarators", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanPurpose_Result> proc_GetAllLoanPurpose()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanPurpose_Result>("proc_GetAllLoanPurpose");
        }
    
        public virtual ObjectResult<proc_GetAllLoans_Result> proc_GetAllLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoans_Result>("proc_GetAllLoans");
        }
    
        public virtual ObjectResult<proc_GetAllLoanStatus_Result> proc_GetAllLoanStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanStatus_Result>("proc_GetAllLoanStatus");
        }
    
        public virtual ObjectResult<proc_GetAllLoansType_Result> proc_GetAllLoansType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoansType_Result>("proc_GetAllLoansType");
        }
    
        public virtual ObjectResult<proc_GetAllLoansTypeCharges_Result> proc_GetAllLoansTypeCharges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoansTypeCharges_Result>("proc_GetAllLoansTypeCharges");
        }
    
        public virtual ObjectResult<proc_GetAllLoansTypes_Result> proc_GetAllLoansTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoansTypes_Result>("proc_GetAllLoansTypes");
        }
    
        public virtual ObjectResult<proc_GetAllLoanTypeChargesByLoansTypeId_Result> proc_GetAllLoanTypeChargesByLoansTypeId(Nullable<int> loanTypeId)
        {
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanTypeChargesByLoansTypeId_Result>("proc_GetAllLoanTypeChargesByLoansTypeId", loanTypeIdParameter);
        }
    
        public virtual int proc_GetAllLoanTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetAllLoanTypes");
        }
    
        public virtual ObjectResult<proc_GetAllMaritials_Result> proc_GetAllMaritials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllMaritials_Result>("proc_GetAllMaritials");
        }
    
        public virtual ObjectResult<proc_GetALlMembers_Result> proc_GetALlMembers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALlMembers_Result>("proc_GetALlMembers");
        }
    
        public virtual ObjectResult<proc_GetALLMemberShare_Result> proc_GetALLMemberShare()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLMemberShare_Result>("proc_GetALLMemberShare");
        }
    
        public virtual ObjectResult<proc_GetALLMemberShares_Result> proc_GetALLMemberShares()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLMemberShares_Result>("proc_GetALLMemberShares");
        }
    
        public virtual ObjectResult<proc_GetALLMembersShares_Result> proc_GetALLMembersShares()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLMembersShares_Result>("proc_GetALLMembersShares");
        }
    
        public virtual ObjectResult<proc_GetAllMemberStatus_Result> proc_GetAllMemberStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllMemberStatus_Result>("proc_GetAllMemberStatus");
        }
    
        public virtual ObjectResult<proc_GetAllMessages_Result> proc_GetAllMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllMessages_Result>("proc_GetAllMessages");
        }
    
        public virtual ObjectResult<proc_GetAllMessagesWithLimit_Result> proc_GetAllMessagesWithLimit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllMessagesWithLimit_Result>("proc_GetAllMessagesWithLimit");
        }
    
        public virtual ObjectResult<proc_GetAllNationality_Result> proc_GetAllNationality()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllNationality_Result>("proc_GetAllNationality");
        }
    
        public virtual ObjectResult<proc_GetAllPayModes_Result> proc_GetAllPayModes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllPayModes_Result>("proc_GetAllPayModes");
        }
    
        public virtual ObjectResult<proc_GetALLProduct_Result> proc_GetALLProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLProduct_Result>("proc_GetALLProduct");
        }
    
        public virtual ObjectResult<proc_GetAllProductChargeById_Result> proc_GetAllProductChargeById(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllProductChargeById_Result>("proc_GetAllProductChargeById", productIdParameter);
        }
    
        public virtual ObjectResult<proc_GetALLProducts_Result> proc_GetALLProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetALLProducts_Result>("proc_GetALLProducts");
        }
    
        public virtual ObjectResult<proc_GetAllRegistredMembers_Result> proc_GetAllRegistredMembers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllRegistredMembers_Result>("proc_GetAllRegistredMembers");
        }
    
        public virtual ObjectResult<proc_GetAllRelations_Result> proc_GetAllRelations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllRelations_Result>("proc_GetAllRelations");
        }
    
        public virtual ObjectResult<proc_GetAllSecurityQuestions_Result> proc_GetAllSecurityQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllSecurityQuestions_Result>("proc_GetAllSecurityQuestions");
        }
    
        public virtual ObjectResult<proc_GetAllStructureGroupDetails_Result> proc_GetAllStructureGroupDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllStructureGroupDetails_Result>("proc_GetAllStructureGroupDetails");
        }
    
        public virtual ObjectResult<proc_GetAllStructures_Result> proc_GetAllStructures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllStructures_Result>("proc_GetAllStructures");
        }
    
        public virtual ObjectResult<proc_GetAllStructureValues_Result> proc_GetAllStructureValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllStructureValues_Result>("proc_GetAllStructureValues");
        }
    
        public virtual ObjectResult<proc_GetAllTariff_Result> proc_GetAllTariff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllTariff_Result>("proc_GetAllTariff");
        }
    
        public virtual ObjectResult<proc_GetAllTitle_Result> proc_GetAllTitle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllTitle_Result>("proc_GetAllTitle");
        }
    
        public virtual ObjectResult<proc_GetAllTransactionCharge_Result> proc_GetAllTransactionCharge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllTransactionCharge_Result>("proc_GetAllTransactionCharge");
        }
    
        public virtual ObjectResult<proc_GetAllTransactionCharges_Result> proc_GetAllTransactionCharges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllTransactionCharges_Result>("proc_GetAllTransactionCharges");
        }
    
        public virtual ObjectResult<proc_GetAllWithdrawals_Result> proc_GetAllWithdrawals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllWithdrawals_Result>("proc_GetAllWithdrawals");
        }
    
        public virtual ObjectResult<proc_GetAutoGenNumberById_Result> proc_GetAutoGenNumberById(Nullable<int> autoGenNumberId)
        {
            var autoGenNumberIdParameter = autoGenNumberId.HasValue ?
                new ObjectParameter("AutoGenNumberId", autoGenNumberId) :
                new ObjectParameter("AutoGenNumberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAutoGenNumberById_Result>("proc_GetAutoGenNumberById", autoGenNumberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetAutoGenPrefixeById_Result> proc_GetAutoGenPrefixeById(Nullable<int> autoPrefixId)
        {
            var autoPrefixIdParameter = autoPrefixId.HasValue ?
                new ObjectParameter("AutoPrefixId", autoPrefixId) :
                new ObjectParameter("AutoPrefixId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAutoGenPrefixeById_Result>("proc_GetAutoGenPrefixeById", autoPrefixIdParameter);
        }
    
        public virtual ObjectResult<Proc_getBalanceAmount_Result> Proc_getBalanceAmount(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getBalanceAmount_Result>("Proc_getBalanceAmount", productIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_getBalancesAmountAll(Nullable<int> productId, Nullable<int> memberId, string accountNumber)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_getBalancesAmountAll", productIdParameter, memberIdParameter, accountNumberParameter);
        }
    
        public virtual ObjectResult<proc_GetChargeById_Result> proc_GetChargeById(Nullable<int> chargeId)
        {
            var chargeIdParameter = chargeId.HasValue ?
                new ObjectParameter("ChargeId", chargeId) :
                new ObjectParameter("ChargeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetChargeById_Result>("proc_GetChargeById", chargeIdParameter);
        }
    
        public virtual ObjectResult<proc_getChargesByAccountTransactionId_Result> proc_getChargesByAccountTransactionId(Nullable<int> accountTransactionId)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getChargesByAccountTransactionId_Result>("proc_getChargesByAccountTransactionId", accountTransactionIdParameter);
        }
    
        public virtual ObjectResult<proc_GetContact_Result> proc_GetContact(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetContact_Result>("proc_GetContact", contactIdParameter);
        }
    
        public virtual ObjectResult<proc_GetCurrencyIdByMemberId_Result> proc_GetCurrencyIdByMemberId(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetCurrencyIdByMemberId_Result>("proc_GetCurrencyIdByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_getDefaultPayment_Result> proc_getDefaultPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getDefaultPayment_Result>("proc_getDefaultPayment");
        }
    
        public virtual ObjectResult<Proc_getExRateByCurrencyId_Result> Proc_getExRateByCurrencyId(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getExRateByCurrencyId_Result>("Proc_getExRateByCurrencyId", currencyIdParameter);
        }
    
        public virtual ObjectResult<proc_getLatestWebContantsUs_Result> proc_getLatestWebContantsUs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getLatestWebContantsUs_Result>("proc_getLatestWebContantsUs");
        }
    
        public virtual int proc_GetLoanTypeById(Nullable<int> loanTypeId)
        {
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetLoanTypeById", loanTypeIdParameter);
        }
    
        public virtual ObjectResult<proc_GetMainCurrency_Result> proc_GetMainCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMainCurrency_Result>("proc_GetMainCurrency");
        }
    
        public virtual ObjectResult<proc_GetMemberById_Result> proc_GetMemberById(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMemberById_Result>("proc_GetMemberById", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetMemberShareByMemberId_Result> proc_GetMemberShareByMemberId(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMemberShareByMemberId_Result>("proc_GetMemberShareByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetMemberShared_Result> proc_GetMemberShared(Nullable<int> memberShareId)
        {
            var memberShareIdParameter = memberShareId.HasValue ?
                new ObjectParameter("MemberShareId", memberShareId) :
                new ObjectParameter("MemberShareId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMemberShared_Result>("proc_GetMemberShared", memberShareIdParameter);
        }
    
        public virtual ObjectResult<proc_GetMemberSharesByMemberId_Result> proc_GetMemberSharesByMemberId(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMemberSharesByMemberId_Result>("proc_GetMemberSharesByMemberId", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetMembersSharesALL_Result> proc_GetMembersSharesALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetMembersSharesALL_Result>("proc_GetMembersSharesALL");
        }
    
        public virtual ObjectResult<proc_getNameofCharge_Result> proc_getNameofCharge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getNameofCharge_Result>("proc_getNameofCharge");
        }
    
        public virtual ObjectResult<Proc_GetParentStructure_Result> Proc_GetParentStructure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetParentStructure_Result>("Proc_GetParentStructure");
        }
    
        public virtual ObjectResult<proc_GetParentUsingChild_Result> proc_GetParentUsingChild(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetParentUsingChild_Result>("proc_GetParentUsingChild", parentIdParameter);
        }
    
        public virtual ObjectResult<proc_getReadMessages_Result> proc_getReadMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getReadMessages_Result>("proc_getReadMessages");
        }
    
        public virtual ObjectResult<proc_getStractureId_Result> proc_getStractureId(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getStractureId_Result>("proc_getStractureId", parentIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetStructure_Result> Proc_GetStructure(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetStructure_Result>("Proc_GetStructure", parentIdParameter);
        }
    
        public virtual ObjectResult<proc_getStructureTree_Result> proc_getStructureTree(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getStructureTree_Result>("proc_getStructureTree", memberIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetStructureValueId_Result> Proc_GetStructureValueId(Nullable<int> structureId)
        {
            var structureIdParameter = structureId.HasValue ?
                new ObjectParameter("StructureId", structureId) :
                new ObjectParameter("StructureId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetStructureValueId_Result>("Proc_GetStructureValueId", structureIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Proc_getTariffAmount(Nullable<decimal> amount)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Proc_getTariffAmount", amountParameter);
        }
    
        public virtual ObjectResult<Proc_getTariffChargeAmount_Result> Proc_getTariffChargeAmount(Nullable<decimal> amount)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_getTariffChargeAmount_Result>("Proc_getTariffChargeAmount", amountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_GetTotalShare(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_GetTotalShare", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_getUnReadMessages_Result> proc_getUnReadMessages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getUnReadMessages_Result>("proc_getUnReadMessages");
        }
    
        public virtual ObjectResult<proc_ListAllLocations_Result> proc_ListAllLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ListAllLocations_Result>("proc_ListAllLocations");
        }
    
        public virtual ObjectResult<proc_ListLocaton_Result> proc_ListLocaton(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ListLocaton_Result>("proc_ListLocaton", locationIdParameter);
        }
    
        public virtual ObjectResult<Proc_ParseXMLToTable_Result> Proc_ParseXMLToTable(string inputXML)
        {
            var inputXMLParameter = inputXML != null ?
                new ObjectParameter("InputXML", inputXML) :
                new ObjectParameter("InputXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_ParseXMLToTable_Result>("Proc_ParseXMLToTable", inputXMLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_SumMembers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_SumMembers");
        }
    
        public virtual ObjectResult<Proc_TariffByChargesId_Result> Proc_TariffByChargesId(Nullable<int> chargesId)
        {
            var chargesIdParameter = chargesId.HasValue ?
                new ObjectParameter("ChargesId", chargesId) :
                new ObjectParameter("ChargesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_TariffByChargesId_Result>("Proc_TariffByChargesId", chargesIdParameter);
        }
    
        public virtual ObjectResult<Proc_TestTable_Result> Proc_TestTable(string inputXML)
        {
            var inputXMLParameter = inputXML != null ?
                new ObjectParameter("InputXML", inputXML) :
                new ObjectParameter("InputXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_TestTable_Result>("Proc_TestTable", inputXMLParameter);
        }
    
        public virtual ObjectResult<proc_UpdateMessage_Result> proc_UpdateMessage(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_UpdateMessage_Result>("proc_UpdateMessage", contactIdParameter);
        }
    
        public virtual ObjectResult<proc_UpdateMessages_Result> proc_UpdateMessages(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_UpdateMessages_Result>("proc_UpdateMessages", contactIdParameter);
        }
    
        public virtual ObjectResult<proc_UpdateTransaction_Result> proc_UpdateTransaction(Nullable<int> accountTransactionId, string remarks, Nullable<bool> isBlocked)
        {
            var accountTransactionIdParameter = accountTransactionId.HasValue ?
                new ObjectParameter("AccountTransactionId", accountTransactionId) :
                new ObjectParameter("AccountTransactionId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("IsBlocked", isBlocked) :
                new ObjectParameter("IsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_UpdateTransaction_Result>("proc_UpdateTransaction", accountTransactionIdParameter, remarksParameter, isBlockedParameter);
        }
    
        public virtual ObjectResult<Sp_GetALLProduct_Result> Sp_GetALLProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetALLProduct_Result>("Sp_GetALLProduct");
        }
    
        public virtual ObjectResult<string> sp_ReturnFields(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_ReturnFields", tableNameParameter);
        }
    
        public virtual ObjectResult<proc_GetAllActivebLoans_Result> proc_GetAllActivebLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllActivebLoans_Result>("proc_GetAllActivebLoans");
        }
    
        public virtual ObjectResult<proc_GetAllAppraisedLoans_Result> proc_GetAllAppraisedLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAppraisedLoans_Result>("proc_GetAllAppraisedLoans");
        }
    
        public virtual ObjectResult<proc_getDefaultStatus_Result> proc_getDefaultStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_getDefaultStatus_Result>("proc_getDefaultStatus");
        }
    
        public virtual ObjectResult<Nullable<int>> proc_getDefaultLoanStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_getDefaultLoanStatus");
        }
    
        public virtual ObjectResult<proc_GetAllActiveLoans_Result> proc_GetAllActiveLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllActiveLoans_Result>("proc_GetAllActiveLoans");
        }
    
        public virtual ObjectResult<proc_GetActiveLoans_Result> proc_GetActiveLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetActiveLoans_Result>("proc_GetActiveLoans");
        }
    
        public virtual ObjectResult<proc_GetAllAppraisedLoan_Result> proc_GetAllAppraisedLoan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllAppraisedLoan_Result>("proc_GetAllAppraisedLoan");
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_GetSumLoanApplicationCharges(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_GetSumLoanApplicationCharges", loanIdParameter);
        }
    
        public virtual int proc_deleteLoan(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_deleteLoan", loanIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_GetGuaranteedAmount(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_GetGuaranteedAmount", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetDIsbursedLoan_Result> proc_GetDIsbursedLoan(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetDIsbursedLoan_Result>("proc_GetDIsbursedLoan", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanRepayment_Result> proc_AddEditLoanRepayment(Nullable<int> repaymentId, Nullable<int> memberId, Nullable<int> loanId, Nullable<int> bankId, string repaymentNo, Nullable<System.DateTime> paymentDate, Nullable<decimal> paymentAmount, Nullable<decimal> principal, Nullable<decimal> interest, string paymentMode, string voucherNo, Nullable<decimal> loanAmount, Nullable<decimal> otherCharges, Nullable<decimal> loanBalance, Nullable<System.DateTime> refDate, string chequeNo, Nullable<bool> calculateGrossAmount, Nullable<bool> affectsMonthlySchedule, Nullable<bool> clearLoans, Nullable<bool> repaidByGuarantors, string paidBy, string remarks, Nullable<bool> delete)
        {
            var repaymentIdParameter = repaymentId.HasValue ?
                new ObjectParameter("RepaymentId", repaymentId) :
                new ObjectParameter("RepaymentId", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var repaymentNoParameter = repaymentNo != null ?
                new ObjectParameter("RepaymentNo", repaymentNo) :
                new ObjectParameter("RepaymentNo", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var principalParameter = principal.HasValue ?
                new ObjectParameter("Principal", principal) :
                new ObjectParameter("Principal", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var loanBalanceParameter = loanBalance.HasValue ?
                new ObjectParameter("LoanBalance", loanBalance) :
                new ObjectParameter("LoanBalance", typeof(decimal));
    
            var refDateParameter = refDate.HasValue ?
                new ObjectParameter("RefDate", refDate) :
                new ObjectParameter("RefDate", typeof(System.DateTime));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var calculateGrossAmountParameter = calculateGrossAmount.HasValue ?
                new ObjectParameter("CalculateGrossAmount", calculateGrossAmount) :
                new ObjectParameter("CalculateGrossAmount", typeof(bool));
    
            var affectsMonthlyScheduleParameter = affectsMonthlySchedule.HasValue ?
                new ObjectParameter("AffectsMonthlySchedule", affectsMonthlySchedule) :
                new ObjectParameter("AffectsMonthlySchedule", typeof(bool));
    
            var clearLoansParameter = clearLoans.HasValue ?
                new ObjectParameter("ClearLoans", clearLoans) :
                new ObjectParameter("ClearLoans", typeof(bool));
    
            var repaidByGuarantorsParameter = repaidByGuarantors.HasValue ?
                new ObjectParameter("RepaidByGuarantors", repaidByGuarantors) :
                new ObjectParameter("RepaidByGuarantors", typeof(bool));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanRepayment_Result>("proc_AddEditLoanRepayment", repaymentIdParameter, memberIdParameter, loanIdParameter, bankIdParameter, repaymentNoParameter, paymentDateParameter, paymentAmountParameter, principalParameter, interestParameter, paymentModeParameter, voucherNoParameter, loanAmountParameter, otherChargesParameter, loanBalanceParameter, refDateParameter, chequeNoParameter, calculateGrossAmountParameter, affectsMonthlyScheduleParameter, clearLoansParameter, repaidByGuarantorsParameter, paidByParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_GetRepaymentByLoanId_Result> proc_GetRepaymentByLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRepaymentByLoanId_Result>("proc_GetRepaymentByLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoansRepayment_Result> proc_AddEditLoansRepayment(Nullable<int> repaymentId, Nullable<int> loanId, Nullable<int> bankId, Nullable<int> currencyId, Nullable<int> serialId, Nullable<int> baseCurrencyId, Nullable<decimal> exchangeRate, string repaymentNo, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, Nullable<int> transType, Nullable<decimal> amount, string paymentMode, string voucherNo, string chequeNo, string paidBy, string remarks, Nullable<bool> delete)
        {
            var repaymentIdParameter = repaymentId.HasValue ?
                new ObjectParameter("RepaymentId", repaymentId) :
                new ObjectParameter("RepaymentId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var serialIdParameter = serialId.HasValue ?
                new ObjectParameter("SerialId", serialId) :
                new ObjectParameter("SerialId", typeof(int));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var repaymentNoParameter = repaymentNo != null ?
                new ObjectParameter("RepaymentNo", repaymentNo) :
                new ObjectParameter("RepaymentNo", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoansRepayment_Result>("proc_AddEditLoansRepayment", repaymentIdParameter, loanIdParameter, bankIdParameter, currencyIdParameter, serialIdParameter, baseCurrencyIdParameter, exchangeRateParameter, repaymentNoParameter, transactionDateParameter, valueDateParameter, transTypeParameter, amountParameter, paymentModeParameter, voucherNoParameter, chequeNoParameter, paidByParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_GetDIsbursedLoans_Result> proc_GetDIsbursedLoans(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetDIsbursedLoans_Result>("proc_GetDIsbursedLoans", memberIdParameter);
        }
    
        public virtual ObjectResult<proc_GetRepayedLoanByLoanId_Result> proc_GetRepayedLoanByLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRepayedLoanByLoanId_Result>("proc_GetRepayedLoanByLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_GetDisbursedLoan1_Result> proc_GetDisbursedLoan1(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetDisbursedLoan1_Result>("proc_GetDisbursedLoan1", memberIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_MaxRepayment(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_MaxRepayment", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoansRepayments_Result> proc_AddEditLoansRepayments(Nullable<int> repaymentId, Nullable<int> loanId, Nullable<int> bankId, Nullable<int> currencyId, Nullable<int> serialId, Nullable<int> baseCurrencyId, Nullable<decimal> exchangeRate, Nullable<int> repaymentNo, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, Nullable<int> transType, Nullable<decimal> amount, string paymentMode, string voucherNo, string chequeNo, string paidBy, string remarks, Nullable<bool> delete)
        {
            var repaymentIdParameter = repaymentId.HasValue ?
                new ObjectParameter("RepaymentId", repaymentId) :
                new ObjectParameter("RepaymentId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var serialIdParameter = serialId.HasValue ?
                new ObjectParameter("SerialId", serialId) :
                new ObjectParameter("SerialId", typeof(int));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var repaymentNoParameter = repaymentNo.HasValue ?
                new ObjectParameter("RepaymentNo", repaymentNo) :
                new ObjectParameter("RepaymentNo", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoansRepayments_Result>("proc_AddEditLoansRepayments", repaymentIdParameter, loanIdParameter, bankIdParameter, currencyIdParameter, serialIdParameter, baseCurrencyIdParameter, exchangeRateParameter, repaymentNoParameter, transactionDateParameter, valueDateParameter, transTypeParameter, amountParameter, paymentModeParameter, voucherNoParameter, chequeNoParameter, paidByParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_GetRepayedLoansByLoanId_Result> proc_GetRepayedLoansByLoanId(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRepayedLoansByLoanId_Result>("proc_GetRepayedLoansByLoanId", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_AddEditRepayedLoans_Result> proc_AddEditRepayedLoans(Nullable<int> repaymentId, Nullable<int> loanId, Nullable<int> bankId, Nullable<int> currencyId, Nullable<int> serialId, Nullable<int> baseCurrencyId, Nullable<decimal> exchangeRate, Nullable<decimal> foreignAmount, Nullable<decimal> amount, Nullable<int> repaymentNo, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> valueDate, Nullable<int> transType, string paymentMode, string voucherNo, string documentNo, string paidBy, string remarks, Nullable<bool> delete)
        {
            var repaymentIdParameter = repaymentId.HasValue ?
                new ObjectParameter("RepaymentId", repaymentId) :
                new ObjectParameter("RepaymentId", typeof(int));
    
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var serialIdParameter = serialId.HasValue ?
                new ObjectParameter("SerialId", serialId) :
                new ObjectParameter("SerialId", typeof(int));
    
            var baseCurrencyIdParameter = baseCurrencyId.HasValue ?
                new ObjectParameter("BaseCurrencyId", baseCurrencyId) :
                new ObjectParameter("BaseCurrencyId", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var foreignAmountParameter = foreignAmount.HasValue ?
                new ObjectParameter("ForeignAmount", foreignAmount) :
                new ObjectParameter("ForeignAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var repaymentNoParameter = repaymentNo.HasValue ?
                new ObjectParameter("RepaymentNo", repaymentNo) :
                new ObjectParameter("RepaymentNo", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(int));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditRepayedLoans_Result>("proc_AddEditRepayedLoans", repaymentIdParameter, loanIdParameter, bankIdParameter, currencyIdParameter, serialIdParameter, baseCurrencyIdParameter, exchangeRateParameter, foreignAmountParameter, amountParameter, repaymentNoParameter, transactionDateParameter, valueDateParameter, transTypeParameter, paymentModeParameter, voucherNoParameter, documentNoParameter, paidByParameter, remarksParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_GetRepayedLoans_Result> proc_GetRepayedLoans(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetRepayedLoans_Result>("proc_GetRepayedLoans", loanIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_getSumAmount(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_getSumAmount", loanIdParameter);
        }
    
        public virtual ObjectResult<proc_AddEditLoanRecoveryOrder_Result> proc_AddEditLoanRecoveryOrder(Nullable<int> loanRecoveryOrderId, string orderName, Nullable<int> recoveryOrder, Nullable<bool> delete)
        {
            var loanRecoveryOrderIdParameter = loanRecoveryOrderId.HasValue ?
                new ObjectParameter("LoanRecoveryOrderId", loanRecoveryOrderId) :
                new ObjectParameter("LoanRecoveryOrderId", typeof(int));
    
            var orderNameParameter = orderName != null ?
                new ObjectParameter("OrderName", orderName) :
                new ObjectParameter("OrderName", typeof(string));
    
            var recoveryOrderParameter = recoveryOrder.HasValue ?
                new ObjectParameter("RecoveryOrder", recoveryOrder) :
                new ObjectParameter("RecoveryOrder", typeof(int));
    
            var deleteParameter = delete.HasValue ?
                new ObjectParameter("Delete", delete) :
                new ObjectParameter("Delete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AddEditLoanRecoveryOrder_Result>("proc_AddEditLoanRecoveryOrder", loanRecoveryOrderIdParameter, orderNameParameter, recoveryOrderParameter, deleteParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanRecoverOrder_Result> proc_GetAllLoanRecoverOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanRecoverOrder_Result>("proc_GetAllLoanRecoverOrder");
        }
    
        public virtual int proc_EditLoanRecoveryOrder(string orderName, Nullable<int> recoveryOrder)
        {
            var orderNameParameter = orderName != null ?
                new ObjectParameter("OrderName", orderName) :
                new ObjectParameter("OrderName", typeof(string));
    
            var recoveryOrderParameter = recoveryOrder.HasValue ?
                new ObjectParameter("RecoveryOrder", recoveryOrder) :
                new ObjectParameter("RecoveryOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_EditLoanRecoveryOrder", orderNameParameter, recoveryOrderParameter);
        }
    
        public virtual ObjectResult<proc_GetAllLoanRecoverOrders_Result> proc_GetAllLoanRecoverOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllLoanRecoverOrders_Result>("proc_GetAllLoanRecoverOrders");
        }
    }
}
